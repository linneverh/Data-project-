{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/linneverh/Data-project-/blob/main/Version%20-%20to%20-%20be%20-%20revised%20%3A)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "OHM0r5z2CeJU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e053b4bb-5ae9-4856-b1c1-bad2b89cf584"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: sentence-transformers in /usr/local/lib/python3.11/dist-packages (4.1.0)\n",
            "Requirement already satisfied: transformers<5.0.0,>=4.41.0 in /usr/local/lib/python3.11/dist-packages (from sentence-transformers) (4.51.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from sentence-transformers) (4.67.1)\n",
            "Requirement already satisfied: torch>=1.11.0 in /usr/local/lib/python3.11/dist-packages (from sentence-transformers) (2.6.0+cu124)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (from sentence-transformers) (1.6.1)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from sentence-transformers) (1.15.3)\n",
            "Requirement already satisfied: huggingface-hub>=0.20.0 in /usr/local/lib/python3.11/dist-packages (from sentence-transformers) (0.31.2)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.11/dist-packages (from sentence-transformers) (11.2.1)\n",
            "Requirement already satisfied: typing_extensions>=4.5.0 in /usr/local/lib/python3.11/dist-packages (from sentence-transformers) (4.13.2)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence-transformers) (3.18.0)\n",
            "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence-transformers) (2025.3.2)\n",
            "Requirement already satisfied: packaging>=20.9 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence-transformers) (24.2)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence-transformers) (6.0.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence-transformers) (2.32.3)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (3.4.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (3.1.6)\n",
            "Collecting nvidia-cuda-nvrtc-cu12==12.4.127 (from torch>=1.11.0->sentence-transformers)\n",
            "  Downloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cuda-runtime-cu12==12.4.127 (from torch>=1.11.0->sentence-transformers)\n",
            "  Downloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cuda-cupti-cu12==12.4.127 (from torch>=1.11.0->sentence-transformers)\n",
            "  Downloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cudnn-cu12==9.1.0.70 (from torch>=1.11.0->sentence-transformers)\n",
            "  Downloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cublas-cu12==12.4.5.8 (from torch>=1.11.0->sentence-transformers)\n",
            "  Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cufft-cu12==11.2.1.3 (from torch>=1.11.0->sentence-transformers)\n",
            "  Downloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-curand-cu12==10.3.5.147 (from torch>=1.11.0->sentence-transformers)\n",
            "  Downloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cusolver-cu12==11.6.1.9 (from torch>=1.11.0->sentence-transformers)\n",
            "  Downloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cusparse-cu12==12.3.1.170 (from torch>=1.11.0->sentence-transformers)\n",
            "  Downloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (0.6.2)\n",
            "Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (2.21.5)\n",
            "Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (12.4.127)\n",
            "Collecting nvidia-nvjitlink-cu12==12.4.127 (from torch>=1.11.0->sentence-transformers)\n",
            "  Downloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (3.2.0)\n",
            "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (1.13.1)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch>=1.11.0->sentence-transformers) (1.3.0)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers<5.0.0,>=4.41.0->sentence-transformers) (2.0.2)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers<5.0.0,>=4.41.0->sentence-transformers) (2024.11.6)\n",
            "Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers<5.0.0,>=4.41.0->sentence-transformers) (0.21.1)\n",
            "Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers<5.0.0,>=4.41.0->sentence-transformers) (0.5.3)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn->sentence-transformers) (1.5.0)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn->sentence-transformers) (3.6.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch>=1.11.0->sentence-transformers) (3.0.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.20.0->sentence-transformers) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.20.0->sentence-transformers) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.20.0->sentence-transformers) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.20.0->sentence-transformers) (2025.4.26)\n",
            "Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl (363.4 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m2.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (13.8 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m15.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (24.6 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m16.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (883 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m9.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl (664.8 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl (211.5 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m5.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl (56.3 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m9.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl (127.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m7.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl (207.5 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m6.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (21.1 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m73.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: nvidia-nvjitlink-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, nvidia-cusparse-cu12, nvidia-cudnn-cu12, nvidia-cusolver-cu12\n",
            "  Attempting uninstall: nvidia-nvjitlink-cu12\n",
            "    Found existing installation: nvidia-nvjitlink-cu12 12.5.82\n",
            "    Uninstalling nvidia-nvjitlink-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-nvjitlink-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-curand-cu12\n",
            "    Found existing installation: nvidia-curand-cu12 10.3.6.82\n",
            "    Uninstalling nvidia-curand-cu12-10.3.6.82:\n",
            "      Successfully uninstalled nvidia-curand-cu12-10.3.6.82\n",
            "  Attempting uninstall: nvidia-cufft-cu12\n",
            "    Found existing installation: nvidia-cufft-cu12 11.2.3.61\n",
            "    Uninstalling nvidia-cufft-cu12-11.2.3.61:\n",
            "      Successfully uninstalled nvidia-cufft-cu12-11.2.3.61\n",
            "  Attempting uninstall: nvidia-cuda-runtime-cu12\n",
            "    Found existing installation: nvidia-cuda-runtime-cu12 12.5.82\n",
            "    Uninstalling nvidia-cuda-runtime-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-cuda-runtime-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-cuda-nvrtc-cu12\n",
            "    Found existing installation: nvidia-cuda-nvrtc-cu12 12.5.82\n",
            "    Uninstalling nvidia-cuda-nvrtc-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-cuda-nvrtc-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-cuda-cupti-cu12\n",
            "    Found existing installation: nvidia-cuda-cupti-cu12 12.5.82\n",
            "    Uninstalling nvidia-cuda-cupti-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-cuda-cupti-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-cublas-cu12\n",
            "    Found existing installation: nvidia-cublas-cu12 12.5.3.2\n",
            "    Uninstalling nvidia-cublas-cu12-12.5.3.2:\n",
            "      Successfully uninstalled nvidia-cublas-cu12-12.5.3.2\n",
            "  Attempting uninstall: nvidia-cusparse-cu12\n",
            "    Found existing installation: nvidia-cusparse-cu12 12.5.1.3\n",
            "    Uninstalling nvidia-cusparse-cu12-12.5.1.3:\n",
            "      Successfully uninstalled nvidia-cusparse-cu12-12.5.1.3\n",
            "  Attempting uninstall: nvidia-cudnn-cu12\n",
            "    Found existing installation: nvidia-cudnn-cu12 9.3.0.75\n",
            "    Uninstalling nvidia-cudnn-cu12-9.3.0.75:\n",
            "      Successfully uninstalled nvidia-cudnn-cu12-9.3.0.75\n",
            "  Attempting uninstall: nvidia-cusolver-cu12\n",
            "    Found existing installation: nvidia-cusolver-cu12 11.6.3.83\n",
            "    Uninstalling nvidia-cusolver-cu12-11.6.3.83:\n",
            "      Successfully uninstalled nvidia-cusolver-cu12-11.6.3.83\n",
            "Successfully installed nvidia-cublas-cu12-12.4.5.8 nvidia-cuda-cupti-cu12-12.4.127 nvidia-cuda-nvrtc-cu12-12.4.127 nvidia-cuda-runtime-cu12-12.4.127 nvidia-cudnn-cu12-9.1.0.70 nvidia-cufft-cu12-11.2.1.3 nvidia-curand-cu12-10.3.5.147 nvidia-cusolver-cu12-11.6.1.9 nvidia-cusparse-cu12-12.3.1.170 nvidia-nvjitlink-cu12-12.4.127\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (1.5.0)\n",
            "\u001b[31mERROR: Could not find a version that satisfies the requirement collections (from versions: none)\u001b[0m\u001b[31m\n",
            "\u001b[0m\u001b[31mERROR: No matching distribution found for collections\u001b[0m\u001b[31m\n",
            "\u001b[0m"
          ]
        }
      ],
      "source": [
        "#Library\n",
        "!pip install sentence-transformers\n",
        "!pip install joblib\n",
        "!pip install collections\n",
        "from collections import defaultdict\n",
        "from joblib import Parallel, delayed\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import sklearn\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import random\n",
        "from sklearn.preprocessing import normalize\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sentence_transformers import SentenceTransformer\n",
        "from sklearn.model_selection import train_test_split\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "collapsed": true,
        "id": "U26TtWpHCeJW"
      },
      "source": [
        "# Recommender Systems\n",
        "| Recommender Type     | Similarity Between | Based On           | Example Statement                                      |\n",
        "|----------------------|--------------------|--------------------|--------------------------------------------------------|\n",
        "| CF – Item-Item       | Items              | User behavior      | “You liked A, others who liked A also liked B”         |\n",
        "| CF – User-User       | Users              | User behavior      | “People like you liked B, so you might too”            |\n",
        "| Content-Based        | Items              | Item text/content  | “These books are similar in description/topic”         |\n",
        "| Hybrid               | Items              | Content + Behavior | “You liked A; B is similar and liked by others too”    |\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "collapsed": true,
        "id": "IMEUUjU8CeJY"
      },
      "source": [
        "## Task 1: Exploring\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the datasets\n",
        "interactions = pd.read_csv('https://raw.githubusercontent.com/linneverh/MachineLearning/main/interactions_train.csv')\n",
        "items1 = pd.read_csv(\"https://raw.githubusercontent.com/linneverh/ML/refs/heads/main/embeddings_part1.csv\")\n",
        "items2 = pd.read_csv(\"https://raw.githubusercontent.com/linneverh/ML/refs/heads/main/embeddings_part2.csv\")\n",
        "items = pd.concat([items1, items2])\n",
        "\n",
        "#rename columns\n",
        "interactions = interactions.rename(columns={'u': 'user_id', 'i': 'book_id', 't': 'timestamp'})\n",
        "items=items.rename(columns={'i':'book_id'})\n",
        "# Display the first rows of the updated interactions DataFrame\n",
        "display(interactions.head())\n",
        "display(items.head())\n",
        "\n",
        "# Display the first rows of each dataset\n",
        "display(interactions.head())\n",
        "display(items.head())"
      ],
      "metadata": {
        "collapsed": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "YodjQAEPmdcn",
        "outputId": "470f45ea-b868-4524-b2c3-726fe087c52c"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   user_id  book_id     timestamp\n",
              "0     4456     8581  1.687541e+09\n",
              "1      142     1964  1.679585e+09\n",
              "2      362     3705  1.706872e+09\n",
              "3     1809    11317  1.673533e+09\n",
              "4     4384     1323  1.681402e+09"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-581d132d-a067-4055-88a0-7693256f33cd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>book_id</th>\n",
              "      <th>timestamp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4456</td>\n",
              "      <td>8581</td>\n",
              "      <td>1.687541e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>142</td>\n",
              "      <td>1964</td>\n",
              "      <td>1.679585e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>362</td>\n",
              "      <td>3705</td>\n",
              "      <td>1.706872e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1809</td>\n",
              "      <td>11317</td>\n",
              "      <td>1.673533e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4384</td>\n",
              "      <td>1323</td>\n",
              "      <td>1.681402e+09</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-581d132d-a067-4055-88a0-7693256f33cd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-581d132d-a067-4055-88a0-7693256f33cd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-581d132d-a067-4055-88a0-7693256f33cd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ae1567fa-5dcc-4695-8fa2-9b89423620fa\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ae1567fa-5dcc-4695-8fa2-9b89423620fa')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ae1567fa-5dcc-4695-8fa2-9b89423620fa button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(items\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"user_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2098,\n        \"min\": 142,\n        \"max\": 4456,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          142,\n          4384,\n          362\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"book_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4371,\n        \"min\": 1323,\n        \"max\": 11317,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1964,\n          1323,\n          3705\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"timestamp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12801198.97249742,\n        \"min\": 1673533162.0,\n        \"max\": 1706871659.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1679585406.0,\n          1681402162.0,\n          1706871659.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                               Title  \\\n",
              "0  Classification décimale universelle : édition ...   \n",
              "1  Les interactions dans l'enseignement des langu...   \n",
              "2  Histoire de vie et recherche biographique : pe...   \n",
              "3  Ce livre devrait me permettre de résoudre le c...   \n",
              "4                    Les années glorieuses : roman /   \n",
              "\n",
              "                     Author  \\\n",
              "0                       NaN   \n",
              "1  Cicurel, Francine, 1947-   \n",
              "2                       NaN   \n",
              "3     Mazas, Sylvain, 1980-   \n",
              "4   Lemaitre, Pierre, 1951-   \n",
              "\n",
              "                                          ISBN Valid     Publisher  \\\n",
              "0                          9782871303336; 2871303339   Ed du CEFAL   \n",
              "1                          9782278058327; 2278058320        Didier   \n",
              "2                          2343190194; 9782343190198   L'Harmattan   \n",
              "3  9782365350020; 236535002X; 9782365350488; 2365...       Vraoum!   \n",
              "4  9782702180815; 2702180817; 9782702183618; 2702...  Calmann-Lévy   \n",
              "\n",
              "                                            Subjects  book_id           ISBN  \\\n",
              "0  Classification décimale universelle; Indexatio...        0  9782871303336   \n",
              "1  didactique--langue étrangère - enseignement; d...        1  9782278058327   \n",
              "2  Histoires de vie en sociologie; Sciences socia...        2     2343190194   \n",
              "3  Moyen-Orient; Bandes dessinées autobiographiqu...        3  9782365350020   \n",
              "4  France--1945-1975; Roman historique; Roman fra...        4  9782702180815   \n",
              "\n",
              "                                    google_api_title      author_clean  \\\n",
              "0                Classification décimale universelle               NaN   \n",
              "1   Les interactions dans l'enseignement des langues  Cicurel Francine   \n",
              "2          Histoire de vie et recherche biographique               NaN   \n",
              "3  Ce livre devrait me permettre de résoudre le c...     Mazas Sylvain   \n",
              "4                              Les années glorieuses   Lemaitre Pierre   \n",
              "\n",
              "                                      embedded_title  \n",
              "0  [-0.010769891, -0.087789156, -0.048586313, 0.0...  \n",
              "1  [0.027142433, -0.020540524, -0.0023190805, 0.0...  \n",
              "2  [0.05334512, -0.03868564, -0.003815435, -0.027...  \n",
              "3  [0.02292607, -0.039551307, -0.024395213, -0.00...  \n",
              "4  [0.027675966, -0.01612932, -0.01800864, 0.0196...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4ff3cf83-c5a8-4742-8464-5c3c74d8841f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Title</th>\n",
              "      <th>Author</th>\n",
              "      <th>ISBN Valid</th>\n",
              "      <th>Publisher</th>\n",
              "      <th>Subjects</th>\n",
              "      <th>book_id</th>\n",
              "      <th>ISBN</th>\n",
              "      <th>google_api_title</th>\n",
              "      <th>author_clean</th>\n",
              "      <th>embedded_title</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Classification décimale universelle : édition ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>9782871303336; 2871303339</td>\n",
              "      <td>Ed du CEFAL</td>\n",
              "      <td>Classification décimale universelle; Indexatio...</td>\n",
              "      <td>0</td>\n",
              "      <td>9782871303336</td>\n",
              "      <td>Classification décimale universelle</td>\n",
              "      <td>NaN</td>\n",
              "      <td>[-0.010769891, -0.087789156, -0.048586313, 0.0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Les interactions dans l'enseignement des langu...</td>\n",
              "      <td>Cicurel, Francine, 1947-</td>\n",
              "      <td>9782278058327; 2278058320</td>\n",
              "      <td>Didier</td>\n",
              "      <td>didactique--langue étrangère - enseignement; d...</td>\n",
              "      <td>1</td>\n",
              "      <td>9782278058327</td>\n",
              "      <td>Les interactions dans l'enseignement des langues</td>\n",
              "      <td>Cicurel Francine</td>\n",
              "      <td>[0.027142433, -0.020540524, -0.0023190805, 0.0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Histoire de vie et recherche biographique : pe...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2343190194; 9782343190198</td>\n",
              "      <td>L'Harmattan</td>\n",
              "      <td>Histoires de vie en sociologie; Sciences socia...</td>\n",
              "      <td>2</td>\n",
              "      <td>2343190194</td>\n",
              "      <td>Histoire de vie et recherche biographique</td>\n",
              "      <td>NaN</td>\n",
              "      <td>[0.05334512, -0.03868564, -0.003815435, -0.027...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Ce livre devrait me permettre de résoudre le c...</td>\n",
              "      <td>Mazas, Sylvain, 1980-</td>\n",
              "      <td>9782365350020; 236535002X; 9782365350488; 2365...</td>\n",
              "      <td>Vraoum!</td>\n",
              "      <td>Moyen-Orient; Bandes dessinées autobiographiqu...</td>\n",
              "      <td>3</td>\n",
              "      <td>9782365350020</td>\n",
              "      <td>Ce livre devrait me permettre de résoudre le c...</td>\n",
              "      <td>Mazas Sylvain</td>\n",
              "      <td>[0.02292607, -0.039551307, -0.024395213, -0.00...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Les années glorieuses : roman /</td>\n",
              "      <td>Lemaitre, Pierre, 1951-</td>\n",
              "      <td>9782702180815; 2702180817; 9782702183618; 2702...</td>\n",
              "      <td>Calmann-Lévy</td>\n",
              "      <td>France--1945-1975; Roman historique; Roman fra...</td>\n",
              "      <td>4</td>\n",
              "      <td>9782702180815</td>\n",
              "      <td>Les années glorieuses</td>\n",
              "      <td>Lemaitre Pierre</td>\n",
              "      <td>[0.027675966, -0.01612932, -0.01800864, 0.0196...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4ff3cf83-c5a8-4742-8464-5c3c74d8841f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4ff3cf83-c5a8-4742-8464-5c3c74d8841f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4ff3cf83-c5a8-4742-8464-5c3c74d8841f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-64531b90-63eb-42f8-807b-f704c9d3a26d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-64531b90-63eb-42f8-807b-f704c9d3a26d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-64531b90-63eb-42f8-807b-f704c9d3a26d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(items\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Les interactions dans l'enseignement des langues : agir professoral et pratiques de classe /\",\n          \"Les ann\\u00e9es glorieuses : roman /\",\n          \"Histoire de vie et recherche biographique : perspectives sociohistoriques /\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Author\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Cicurel, Francine, 1947-\",\n          \"Mazas, Sylvain, 1980-\",\n          \"Lemaitre, Pierre, 1951-\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ISBN Valid\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"9782278058327; 2278058320\",\n          \"9782702180815; 2702180817; 9782702183618; 2702183611\",\n          \"2343190194; 9782343190198\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Publisher\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Didier\",\n          \"Calmann-L\\u00e9vy\",\n          \"L'Harmattan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Subjects\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"didactique--langue \\u00e9trang\\u00e8re - enseignement; didactique--langue - enseignement\",\n          \"France--1945-1975; Roman historique; Roman fran\\u00e7ais; Litt\\u00e9rature fran\\u00e7aise\",\n          \"Histoires de vie en sociologie; Sciences sociales--M\\u00e9thodologie; Actes de congr\\u00e8s\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"book_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          4,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ISBN\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"9782278058327\",\n          \"9782702180815\",\n          \"2343190194\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"google_api_title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Les interactions dans l'enseignement des langues\",\n          \"Les ann\\u00e9es glorieuses\",\n          \"Histoire de vie et recherche biographique\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"author_clean\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Cicurel Francine\",\n          \"Mazas Sylvain\",\n          \"Lemaitre Pierre\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embedded_title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"[0.027142433, -0.020540524, -0.0023190805, 0.023604088, 0.00027529796, 0.017977564, 0.03452997, -0.0474766, 0.015225577, 0.052039135, -0.00036042446, -0.02997406, -0.040366422, -0.04519187, 0.054508, -0.015482123, 0.044681873, -0.022422874, 0.012578571, 0.013673336, -0.011722488, 0.037818618, 0.00047222737, -0.008002775, 0.0016725715, 0.0016066253, 0.018150209, -0.039469957, -0.036887415, 0.016883975, -0.026982145, -0.00012661815, -0.0479128, -0.013174155, -0.026351985, -0.010624157, -0.009502069, 0.025267933, 0.0059955204, -0.01497183, -0.018615108, -0.018552283, -0.021930577, -0.05262457, 0.014632506, -0.037593767, 0.04726378, 0.048031423, -0.02075533, -0.061559338, 0.046888605, 0.024475658, 0.053917464, -0.042040538, 0.025207626, -0.034834586, 0.051548373, 0.038185775, -0.04597259, -0.03408335, -0.017298982, -0.011119516, -0.021341119, 0.06149526, -0.027499536, -0.0013943925, -0.060791872, 0.021295832, 0.019536817, -0.017450517, -0.017689848, -0.06287969, 0.029029777, -0.02794013, -0.020892581, -0.04343794, -0.04452916, 0.023062805, -0.00036030143, 0.054810304, -0.0047882353, -0.051674634, -0.008209593, -0.022826323, -0.082769275, 0.068403944, -0.035857156, 0.0375038, 0.021837747, 0.055980682, -0.058682214, -0.009989164, 0.028589092, -0.017329454, -0.043501, 0.031127524, -0.036791977, 0.03487207, 0.015865752, -0.013901644, -0.031382207, -0.008825678, -0.032679196, -0.0025112326, 0.039644744, 0.047850776, 0.039480958, 0.048473414, -0.022966089, 0.10160202, -0.03141435, -0.013210424, 0.030554524, -0.01766168, 0.026016774, -0.036637027, 0.002638637, 0.04644098, 0.046249747, -0.027496457, 0.026132066, -0.032983944, 0.045741774, -0.011702804, 0.041001625, 0.025523838, 0.01317721, 0.00035619808, 0.07138686, 0.032006413, 0.048128605, -0.05937428, 0.00047666268, 0.07768457, 0.065745614, 0.045708887, 0.05167484, 0.036699127, 0.044075888, 0.07544025, 0.005563494, 0.022931388, -0.021448877, 0.027738836, -0.06049568, 0.023898775, 0.00097041833, -0.030736338, 0.011460269, -0.06485867, -0.051330857, -0.02421889, -0.07106928, 0.066800945, 0.028246626, -0.00790841, -0.041564103, 0.016247021, 0.025421785, 0.01555347, 0.08140845, 0.0577104, 0.0088178655, 0.036845792, -0.03420963, 0.046915133, 0.054541215, -0.03477154, 0.002024032, -0.023456711, -0.0026599984, 0.00030727475, -0.04497442, -0.066424005, -0.0059845923, -0.013414577, -0.0066634766, -0.02254938, -0.025936583, 0.036816612, -0.07114239, -0.056953337, 0.014362161, 0.067963056, 0.05647313, -0.033586144, 0.053269226, -0.035377096, -0.075625084, -0.008647449, -0.006991434, -0.02161103, -0.023115618, -0.014669223, -0.035286196, 0.035241105, -0.010157574, 0.041964203, -0.024342932, -0.04491534, 0.01686072, 0.15007725, 0.017567854, -0.035057317, 0.04989487, -0.014410196, 0.079849645, -0.017984387, -0.037877683, -0.0055427905, -0.010605255, -0.00210061, -0.045535047, 0.026422907, 0.031879693, 0.030605959, -0.039241064, -0.0022882447, 0.034980163, -0.023993803, 0.020393644, -0.042346653, -0.0027872066, 0.034238987, 0.059073377, 0.017745376, -0.04757955, 0.008928198, -0.028489241, -0.07162072, 0.02280017, 0.047385976, 0.03564407, -0.024998993, 0.039792977, -0.016960151, 0.032625016, 0.0129018035, -0.015292085, 0.008901555, -0.02357029, 0.024863329, 0.057376962, 0.0350781, -0.0038111345, 0.039647583, 0.041311458, -0.012593854, 0.0018220166, 0.021582518, -0.021053622, -0.034413863, -0.006093655, 0.0035802536, -0.099609435, 0.06062294, -0.045883697, 0.015404698, 0.05195159, -0.0031022963, 0.03593992, -0.01619717, -0.0125057595, 0.008115051, -0.06305949, -0.028146092, -0.006884062, -0.014162648, -0.0024771597, 0.02552344, 0.025560796, -0.02124001, 0.043573078, 0.021116368, -0.020735782, 0.021645702, -0.0151948705, 0.024453921, -0.005332919, -0.020161852, 0.04281293, 0.053196747, 0.04405796, -0.04416026, -0.03456636, -0.014575961, -0.037296478, -0.0079966355, 0.029502595, -0.06808372, -0.008822236, -0.017506994, 0.016490726, -0.026405796, -0.026769735, 0.0039468133, -0.019438442, 0.032521147, 0.034848552, -0.003946603, -0.008732273, 0.0018336158, 0.021767413, -0.054527342, 0.015800785, 0.0014758749, -0.01063531, -0.05791201, 0.00052916515, -0.052595764, 0.018992908, -0.008620502, -0.024105137, -0.024837466, 0.07343456, 0.062475417, -0.019602142, 0.03071076, -0.021263797, -0.0110718, 0.021765262, 0.05769195, 0.045456357, 0.023844184, 0.024824353, -0.02713382, 0.0009197075, -0.008068059, -0.017499084, -0.012494596, 0.007510915, -0.03325832, -0.027686281, 0.05490669, -0.006310222, -0.047434274, -0.056527544, -0.0089846775, -0.013240663, -0.0010106497, 0.053647455, 0.034933154, -0.021958398, -0.035121836, 0.025348684, -0.031152863, -0.038679533, -0.02513186, 0.049870543, 0.020197157, 0.013573011, 0.053801503, -0.018113049, 0.0037997488, 0.012524442, 0.014127857, 0.055704948, 0.0063386154, 0.03573338, 0.022263717, -0.048880633, 0.05421723, -0.043142587, 0.008278142, -0.0018842363, -0.0019881167, 0.021565609, -0.004158469, -0.041573554, 0.027059488, 0.04140609, -0.04944458, 0.014455445, -0.010858066, 0.017114727, -0.03130681, -0.0067054317, -0.0057035675, 0.04610465, 0.02261927, 0.013902956, 0.0038330597, 0.026624646, 0.02378961, -0.0025881017, 0.0019414292, 0.08277258, 0.011877566, -0.020440238, 0.012699574, 0.0029269585, 0.035966042, 0.04744884, -0.045271445, 0.0128725795, 0.008546885, 0.010560749, -0.05012447, 0.023312261, -0.027402062, -0.040561896, -0.038486872, -0.0966242, 0.0051060393, -0.044217866, -0.022205105, 0.0027858939, -0.04664835, -0.041451372, 0.014975611, -0.015550401, 0.041514426, 0.0038345049, -0.029247422, -0.093997, -0.011456004, 0.034223843, -0.03410642, 0.041151408, 0.008716024, -0.02033994, -0.027159711, 0.0046082195, 0.009262975, 0.011146299, -0.0587786, 0.014949512, -0.010005044, -0.011555668, -0.022643434, 0.034462105, 0.014552569, -0.0060608005, 0.016013876, -0.008711371, -0.035508018, 0.03767841, 0.027342811, -0.0007955024, -0.018068457, 0.009145835, -0.046850394, -0.006373148, 0.030661652, -0.0870119, 0.01744904, 0.0067371367, -0.023716886, 0.03363879, -0.10733218, 0.053184997, -0.07844081, 0.002832561, -0.031800993, -0.0068189506, -0.033438288, -0.0050861645, 0.051835146, -0.026986623, 0.015037746, -0.02231085, -0.033744946, -0.07039597, -0.0739481, 0.007951557, -0.0237737, 0.042215582, 0.0069665783, 0.004247615, 0.05101054, -0.024597913, -0.04031547, 0.0038964679, -0.0060009854, -0.07562473, -0.02487762, -0.08801289, -0.013061932, -0.02354606, -0.0045180195, 0.018833924, -0.039785087, 0.027867293, 0.0123066055, -0.02491561, -0.022141404, -0.031045975, -0.061284263, -0.057623174, 0.024396464, -0.035052303, 0.02190675, 0.02861147, -0.02831549, 0.013814254, 0.03379243, 0.008799612, -0.008985111, 0.02473169, 0.035441443, -0.0065674633, -0.049922265, -0.01395163, -0.008170894, 0.097359784, -0.025037477, 0.009940462, 0.047850978, 0.009716014, -0.06050233, -0.0053205322, -0.004911557, 0.09569588, -0.039645426, 0.021967655, -0.031756643, -0.024276247, -0.03609301, -0.03808405, -0.028172335, 0.067122124, -0.031103345, -0.062894486, -0.007605858, -0.011416188, -0.07815174, -0.02522963, 0.034591857, -0.0029417695, 0.0035066295, -0.019837245, 0.06540605, -0.047672562, 0.0024494422, -0.010271298, -0.011683429, -0.013220007, 0.031526968, 0.026978439, -0.01317559, 0.034454472, 0.0036316493, 0.03858765, 0.03327432, 0.0067307693, 0.016706105, 0.039433118, -0.058149464, 0.051281277, -0.06060769, -0.050163772, 0.0073816217, 0.029024001, -0.029151313, -0.0023354492, 2.3504716e-05, -0.02803457, 0.020090759, 0.012836656, 0.010128475, -0.0498842, 0.017088287, 0.033801958, -0.0016850217, 0.06433099, 0.03772622, -0.051111512, -0.0136458855, 0.03284268, -0.03914711, -0.044828914, 0.029353814, 0.03176771, 0.04982787, -0.009347002, -0.0047025043, 0.0049502836, -0.018715525, 0.0034758367, -0.0348739, 0.030821221, -0.015568467, -0.011095636, 0.06839485, 0.017524634, 0.034052003, 0.01964667, 0.0144328615, 0.034035083, 0.0020167644, -0.014245227, 0.03581507, -0.022901969, -0.019622548, 0.037305646, 0.011413001, 0.020275563, -0.015900897, -0.024980197, -0.016915193, 0.014792825, -0.0043827705, 0.06033795, -0.027224954, 0.031051533, 0.0018879907, -0.0015919221, 0.022977872, -0.008529422, 0.029175201, -0.011882022, -0.0030052636, 0.008843563, -0.03773693, -0.018831575, 0.0026362718, 0.021863792, 0.008598345, -0.0010849979, -0.051589943, -0.0147834, -0.015793372, 0.027256852, -0.03887631, 0.048800655, -0.039819937, -0.015114874, -0.03089365, 0.08536702, 0.05948463, 0.03466869, 0.06610413, 0.017570777, -0.016509663, -0.089170516, 0.031086152, 0.011019665, -0.012326908, -0.023361519, 0.01575868, -0.061152715, 0.012428684, 0.03839507, -0.044189308, -0.025259307, 0.041219506, 0.022230746, -0.09707367, -0.051984686, -0.029335786, -0.05236734, -0.029908493, -0.01357844, -0.049437784, 0.033300143, 0.039269578, -0.02440647, 0.003969735, 0.041075632, 0.010139068, -0.012995733, -0.007494727, -0.028705698, 0.00082188204, -0.008809902, -0.018740565, -0.052104127, -0.056353454, -0.0031758966, 0.012661097, -0.028962532, 0.058633227, 0.030502062, -0.048844095, 0.006302846, -0.0108178435, -0.025131682, 0.017953945, -0.018075408, 0.018053927, -0.026429, -0.032170933, -0.004405795, 0.012295216, -0.023467956, 0.042460695, 0.023037596, -0.031674184, -0.036564704, -0.055931523, -0.019010633, -0.025046764, -0.0712555, 8.611861e-05, 0.0057757758, 0.026232066, 0.0092142075, 0.03525938, 0.022571806, 0.08190164, -0.0033449698, -0.021198032, -0.04860236, 0.013574752, -0.035698395, 0.016163062, -0.023340048, -0.014989142, 0.028393093, 0.006529506, 0.010815611, -0.032567035, -0.046195365, 0.032816473, 0.017748706, -0.02049762, -0.013504844, 0.02878078, -0.036764104, 0.075626776, 0.019785877, 0.020972997, 0.031728398, -0.083044425, -0.02931215, 0.032899506, -0.028159846, 0.03026393, -0.009694038, 0.0058308886, 0.08435889, -0.053855337, -0.0041955337, 0.0067178835, -0.000500954, 0.059708435, -0.03473651, 0.035806242, -0.07816992, -0.081534356, -0.081089124, 0.03987137, 0.02991362, 0.081208974, 0.011049659, -0.053723138, -0.00076049764, -0.0312624, 0.025069578, -0.04062, -0.025072401, 0.00048030837, 0.052829657, 0.02125865, 0.050059285, -0.06767218, -0.015226169, -0.013393508, 0.027979143, 0.046253514, -0.016436914, -0.007504613, 0.036668144, 0.01840988, 0.035528705, 0.04147602, -0.02025752, 0.022766791]\",\n          \"[0.027675966, -0.01612932, -0.01800864, 0.019673012, 0.08769466, 0.0014769429, 0.010704665, -0.005236023, 0.047188684, 0.03761532, -0.016372254, 0.015939767, 0.004009486, -0.04007521, 0.024605079, -0.03173427, 0.030920763, 0.03988214, 0.012887524, -0.03022114, -0.015708633, 0.059043355, -0.016023291, -0.0025308754, -0.04073864, -0.020692555, 0.016963478, -0.07814157, -0.022853358, 0.020579195, -0.03407056, -0.0009133024, -0.08117961, 0.019255063, 0.012193699, -0.06767274, 0.045964666, 0.024942322, 0.004203056, 0.025900425, -0.0016766512, -0.050967444, -0.0025331134, -0.0070740036, -0.017477605, -0.048568357, 0.032993488, 0.04355646, 0.026935793, -0.011673787, 0.02362909, 0.021656943, 0.0323811, -0.03568458, 0.016999958, -0.018094022, 0.057677917, -0.026483634, -0.06923171, -0.015768759, 0.048599586, -0.012578989, -0.0045933896, 0.117373705, -0.0022148765, 0.0087092025, -0.0121498285, 0.0010725158, 0.018069291, -0.029773567, -0.0065932665, -0.058149047, 0.012317347, -0.020933958, -0.0029607306, -0.071151935, -0.010031551, 0.050417494, 0.01571768, 0.05829994, -0.031246232, -0.059578426, -0.06458616, -0.06434521, -0.11007681, -0.0056985705, -0.043544326, -0.004529563, 0.026534904, 0.030224213, -0.006699872, -0.007103079, 0.052954294, -0.024562245, -0.03467211, 0.029829651, -0.02841984, -0.022974577, 0.0036460643, -0.027065475, 0.007957817, -0.024981046, -0.043634426, 0.004404129, 0.020623393, -0.005649733, -0.008119603, 0.037668515, 0.0076730195, 0.013393152, -0.07156598, -0.04496251, 0.0020098502, -0.011508041, 0.045349885, -0.02522553, -0.023734875, 0.08672422, 0.050680164, 0.0198079, -0.013141651, 0.0037596012, 0.04458242, -0.00033742396, -0.003432677, -0.04174845, -0.01704, 0.012852614, 0.07272834, 0.023587443, -0.0077364137, -0.033728167, 0.03521725, 0.026903296, 0.044284433, 0.05662702, 0.07743406, 0.017095689, 0.02821482, 0.08341511, -0.0010819075, 0.0060468814, -0.05681742, 0.050414428, -0.04712003, 0.042968903, -0.02288141, -0.03897936, 0.039459962, -0.0141917085, -0.018188039, 0.027760865, -0.037837904, 0.0067343274, 0.04386743, 0.003132913, 0.0075851004, 0.019935615, -0.020300878, 0.017186366, 0.050820228, 0.030662283, 0.009661271, -0.0046147867, -0.04283695, 0.017464038, 0.037063424, 0.028257443, 0.021280915, 0.0013056456, -0.012006613, 0.025307624, -0.05520984, -0.0548776, -0.0023381659, -0.006577864, -0.022175927, 0.01845564, -0.011816793, -0.025315449, -0.01844265, -0.058456443, 0.032645937, 0.090748034, 0.04877724, -0.043265507, 0.0295654, -0.053176194, -0.03486045, 0.03926745, -0.020162154, -0.029962305, -0.027866887, -0.00030181682, -0.024843324, 0.0048829764, 0.03379248, 0.0054697907, 0.03864054, -0.044570196, 0.020876372, 0.050190754, 0.036993105, -0.042230647, -0.005957735, -0.023794057, 0.07518761, 0.0016025587, -0.030024076, 0.022407368, -0.055284034, 0.0257843, -0.04810012, 0.02377809, 0.059912764, 0.019271413, -0.032413855, 0.025026409, -0.008705957, -0.042916957, -0.0059005506, -0.002629854, -0.065149724, 0.02793766, 0.018158302, 0.06561853, -0.07060635, 0.038004383, -0.0020515942, -0.06500418, 0.037001856, 0.053380176, 0.03387651, -0.0096498635, 0.065369576, -0.012048983, 0.05130614, 0.016552823, 0.0028370486, 0.0043916157, -0.016337922, 0.08983495, 0.034016266, -0.023891885, -0.039697934, -0.0058055203, -0.00906385, 0.032780714, 0.0009496314, 0.053801235, -0.00042002762, -0.05333777, 0.014142019, 0.0064763557, -0.021699158, 0.08151805, -0.07694629, -0.01921763, 0.019488262, 0.0072593256, 0.03883878, -0.0019574403, 0.03849201, -0.013261135, -0.059373863, -0.008145858, 0.007444049, -0.002457871, 0.032179423, -0.020000542, 0.015337558, 0.01255017, 0.009872871, 0.015436845, -0.026779529, 0.003436445, -0.054981563, 0.027686138, -0.0016216725, -0.013636503, 0.0113748815, 0.045526583, 0.032431882, -0.0319864, -0.010411737, -0.005455975, -0.03377873, -0.016305279, 0.05518679, -0.036521833, -0.0631332, -0.005139374, 0.019523894, 0.019637423, -0.06632776, -0.045619722, -0.058334578, 0.025116371, -0.015115836, -0.02673088, -0.0045423615, -0.009782015, 0.0240998, -0.09860343, 0.003611928, 0.05252091, 0.020025449, -0.06811288, 0.01391455, -0.031722445, 0.014957263, -0.015364046, -0.047692735, -0.022694254, 0.0760938, 0.04835445, -0.028068243, 0.041305497, -0.0054453714, 0.030571198, 0.012924156, 0.118531026, -0.004661583, 0.011725988, -0.0021956384, -0.026064696, -0.0024054935, 0.002144951, -0.026255423, 0.0064709187, -0.013892847, -0.03151195, 0.020829773, 0.017528903, 0.041837968, 0.016407095, -0.027098997, -0.021811577, -0.033093296, 0.013941682, 0.0143096065, 0.006511291, -0.03181643, 0.006894264, 0.009564878, -0.027546357, -0.01158202, 0.0069181626, 0.05081759, 0.040569328, -0.028530339, 0.056301963, -0.022616893, -0.0038847341, -0.014485847, 0.033814427, 0.077356376, -0.041799184, 0.0584242, -0.033250395, -0.01642551, 0.0330074, -0.012425451, -0.007753761, -0.030952455, 0.065939896, 0.04130442, -0.021447025, -0.0124002015, 0.0013733932, -0.0010912487, -0.01946465, 0.021435713, 0.0071981526, -0.015114469, 5.1663414e-05, -0.06416092, -0.03810816, 0.04617874, 0.030577064, -0.039076257, -0.05411576, 0.07140274, 0.053727534, 0.021613533, -0.010445244, 0.04294357, 0.03607126, 0.00045055617, 0.035061814, 0.020898245, 0.0400037, 0.10034637, 0.027788682, -0.03512738, -0.0134721445, 0.0003513701, -0.013834071, 0.009900359, -0.028441945, -0.008304218, -0.023436388, -0.048222836, -0.039695732, 0.016395189, -0.022153959, -0.02089958, -0.036257826, -0.041326817, -0.008058679, 0.04642291, -0.004465084, 0.008230223, -0.062921904, -0.044184145, 0.013146781, 0.08177235, 0.024453985, 0.016383596, 0.008152205, -0.012304891, -0.018541295, 0.014353672, -0.014510783, 0.018932883, -0.027113035, -0.0064370856, -0.06366259, -0.018246682, 0.020128, 0.06900221, 0.015200609, 0.024608895, 0.015775722, -0.01994665, -0.015818736, 0.037445914, -0.0034323533, -0.04521333, -0.001612955, -0.0050725294, -0.039193094, 0.035449997, -0.012086672, -0.08428125, -0.0088579785, -0.012092078, -0.08069083, 0.047093075, -0.05322072, -0.008609815, -0.069364436, -0.030420432, -0.03122492, -0.0030653144, -0.036007345, -0.008546834, 0.039641444, -0.016551128, 0.03993006, -0.031430162, -0.041737508, -0.026878018, -0.069476835, 0.014932759, -0.00014464739, 0.01760366, 0.01683364, -0.014240731, 0.0657493, 0.015695214, -0.042684376, -0.057617, -0.00467858, -0.039027512, 0.01491829, -0.06014583, -0.021504562, -0.07206856, -0.022239447, -0.0255402, -0.030811481, 0.04251652, 0.043125328, 0.0031627275, -0.0069473227, 0.004316198, -0.071415074, -0.010020968, 0.02281009, -0.021734204, 0.0003373096, -0.016529465, -0.03294286, -0.0272521, 0.017854195, 0.009275156, -0.03547088, 0.009734336, -0.03088642, -0.0015759157, -0.0012967673, -0.011490113, 0.0005814644, 0.060421813, -0.03301611, -0.01231995, 0.017018076, 0.0013539401, -0.005369835, 0.030433385, -0.025683973, 0.059653193, 0.011631123, 0.055976342, -0.016335404, -0.0386575, 0.01385507, 0.0007230891, -0.0151380515, 0.024919085, -0.06017463, -0.048220735, 0.005097666, 0.045513146, -0.01894805, 0.002825925, 0.0590752, -0.016258385, 2.7603073e-06, 0.010392405, 0.08111331, 0.00660095, 0.0104566, 0.03462871, -0.008173586, -0.015932271, 0.02203306, 0.014376814, -0.034793016, 0.0010091469, 0.009408765, 0.025122888, 0.037452765, -0.0065730573, 0.013123663, 0.010308766, -0.07098793, 0.03411925, -0.04683957, -0.013280506, -0.03233291, 0.030746462, -0.0229811, 0.06990299, 0.0113449115, -0.044929266, -0.038195364, -0.020347761, 0.014470902, 0.0054418365, -0.037563495, -0.013889957, -0.023238225, 0.07328361, 0.03168113, -0.025752222, -0.012130841, 0.053192914, -0.013078436, -0.02072352, 0.045382317, 0.04460789, -0.03828968, 0.0027211078, -0.06356088, 0.0061691534, -0.018233955, 0.0007499137, -0.023740232, 0.04439971, -0.022003299, 0.010365031, -0.009215394, 0.0040893084, 0.013858671, -0.034705628, -0.004722424, 0.055659197, 0.0123139, -0.054872423, 0.01825299, -0.027131774, -0.0294574, -0.018494865, -0.020046894, -0.0077307275, 0.0047810683, -0.011382611, -0.033190183, 0.032056194, -0.030049503, 0.047765687, -0.031619452, -0.008771251, -0.011424602, 0.017476402, 0.007484648, 0.0024974286, -0.004101797, -0.0030271013, -0.021823222, 0.02989468, -0.03326814, -0.027371842, 0.019614125, 0.058687408, 0.052148078, -0.03186921, -0.042316616, 0.021750579, -0.024660269, 0.07660149, 0.026324268, 0.0777513, 0.03646266, 0.020851387, -0.0315803, 0.032615405, 0.025321182, 0.060765926, 0.048275366, -0.0026019288, 0.025151078, -0.09037988, 0.009021032, -0.006359098, -0.005570726, -0.037879802, 0.021299742, -0.062342457, 0.01798802, 0.014602596, -0.054039486, -0.024831016, 0.083493255, -0.003513094, -0.09037449, -0.07484794, -0.05158382, -0.03678857, 0.019955486, -0.054251548, 0.024334233, 0.012189318, 0.013998879, -0.07653803, -0.001718273, 0.02270536, -0.008967865, -0.014876336, 0.0075326655, -0.07057929, -0.040501736, -0.014931589, -0.0061304853, -0.05611491, -0.0628631, -0.025042905, 0.016529433, -0.053267516, 0.035220414, 0.051314954, -0.019800032, -0.0187396, 0.03594137, -0.029316759, 0.029639842, -0.01992964, 0.035974585, -0.0053622224, -0.06312758, -0.010742655, 0.00526042, -0.039760027, 0.05622947, 0.031675894, -0.0077257953, -0.022595976, -0.05521128, 0.046031974, -0.00045437642, 0.0077672335, 0.034348994, 0.016287358, -0.010698653, 0.030355927, -0.043612383, -0.0066668135, 0.042104576, -0.025710344, 0.009196928, 0.033567633, 0.008937168, -0.035637718, -0.014567004, 0.012291415, 0.017134469, 0.03787628, 0.05196295, -0.00070549204, 0.0073756604, -0.06063891, 0.027032394, -0.01596697, -0.028449211, -0.00155747, 0.017781194, -0.06589172, 0.089242466, -0.0029324435, 0.014563134, 0.01385987, -0.08555971, -0.0352584, 0.0051131835, -0.04445287, 0.029864473, 0.010322693, -0.01683466, 0.071051225, -0.025775362, -0.01133975, -0.01596289, 0.0021871894, 0.06297361, -0.018191455, 0.01467534, -0.038454555, -0.07423649, -0.032458577, 0.009555706, -0.011337193, 0.02269034, 0.049823597, -0.035507333, -0.05329748, -0.060757328, -0.039041303, -0.00012414607, 0.047837537, 0.025653662, 0.029209865, 0.115555964, 0.02340641, -0.029865667, -0.025147354, -0.012347484, -0.00016333566, 0.009588136, -0.062415633, 0.0024092172, -0.017962312, 0.033762064, 0.010857769, -0.018301006, -0.012766848, -0.056348305]\",\n          \"[0.05334512, -0.03868564, -0.003815435, -0.027850023, 0.053773407, -0.0071435045, -0.0111352755, -0.026881963, -0.01871548, 0.041413337, 0.022343365, -0.023239233, -0.012897725, -0.011550138, 0.04171863, -0.01794159, 0.024748972, 0.020319102, -0.024958853, -0.026163878, -0.0034447275, 0.0443265, -0.034647644, -0.0304099, -0.015763383, -0.04701259, 0.013211924, -0.0859851, -0.018593837, 0.03989899, -0.05635889, 0.0076722833, -0.04759918, 0.027307916, -0.0002726291, -0.037822522, 0.03143109, -0.0016388495, -0.0030644727, 0.028814116, -0.0016515774, -0.021339208, -0.026085967, -0.035034984, 0.00885767, -0.019883707, 0.049804717, 0.051875707, 0.018189449, -0.054355755, 0.027847763, 0.014522491, 0.027856683, -0.040951136, 0.047992386, -0.043827225, 0.06755898, 0.017863216, -0.055008974, -0.0009697866, 0.029096825, -0.0025427376, -0.043893833, 0.09491934, 0.028452499, -0.012437704, 0.016564261, 0.005197711, 0.03717712, -0.003757467, 0.026775239, -0.025553681, 0.04741475, -0.041754063, -0.06477641, -0.029253524, -0.050278567, 0.027960503, 0.027428921, 0.0122253215, -0.020352153, -0.044482518, -0.03258776, -0.022380956, -0.077032484, 0.042114962, -0.014324117, 0.006950146, -0.0024551142, 0.043540474, -0.048193455, -0.046761446, 0.037963994, -0.040826615, -0.040466733, 0.025545632, -0.07005082, -0.010861434, 0.012878206, -0.021318419, 0.014157929, -0.037048455, -0.044304844, 0.016764566, -0.017363299, -0.014922313, 0.03220124, 0.032717615, -0.010233005, 0.07573268, -0.037230313, -0.044922333, -0.0036990158, 0.0071796356, 0.03589815, -0.010331555, -0.0388288, 0.008191538, 0.035142653, 0.023591157, 0.044057913, -0.0010384555, 0.022635907, 0.00015242462, 0.057561625, -0.015496639, -0.010376354, 0.0052072946, 0.057756096, 0.029053751, 0.01838159, -0.052449748, 0.0047794417, 0.029515006, 0.037543293, 0.05098097, 0.08702503, 0.035573408, 0.04176663, 0.071972124, -0.015004921, 0.023894034, -0.002637107, 0.061491117, -0.041956566, 0.042618055, -0.023593375, -0.032825354, 0.0024061704, -0.008718, -0.0011018572, -0.038745172, -0.049942303, 0.045215692, 0.08674108, -0.008502659, -0.009508976, 0.042957895, 0.018410604, -0.021588245, 0.06622194, 0.015338091, 0.009098114, 0.045558944, -0.04583623, 0.018795175, 0.0337645, -0.00131688, 0.002292315, 0.0024526683, 0.0042728833, 0.01907755, -0.040411614, -0.044386223, -0.015339377, -0.07895421, -0.027505782, -0.01355952, -0.06536835, 0.00048652396, -0.014855626, 0.0035582625, -0.012949567, 0.025742594, 0.04078109, -0.008620362, 0.016935024, -0.04468814, -0.036431212, 0.013336837, 0.012380788, -0.016363306, -0.039013725, 0.0069572837, -0.0071046595, 0.050747424, -0.002046442, 0.007529746, 0.040320273, -0.033236474, -0.0046072844, 0.0760783, 0.01565941, -0.025597537, -0.024123866, -0.029292993, 0.0660606, -0.050358463, -0.009716832, 0.038640767, -0.06321313, 0.030134978, -0.03052134, 0.060070433, 0.04815661, -0.029793883, 0.012571778, 0.024917984, 0.013314703, -0.049185816, 0.012817417, 0.0065044807, -0.026436996, 0.016474508, 0.022131866, 0.05499648, -0.095696665, 0.05598576, -0.00959332, -0.07994606, 0.025739187, 0.048553877, -0.012984153, -0.043573402, 0.03212413, -0.02367307, 0.018609053, 0.033829954, -0.00551221, 0.008401652, -0.03163106, 0.028799035, 0.056887113, -0.0077031003, -0.018231003, 0.025548527, 0.026314413, 0.023383649, -0.035253566, 0.039875757, -0.024191905, -0.06552958, 0.015145615, 0.020154895, -0.066362776, 0.07953172, -0.07545048, -0.01798337, 0.027549917, 0.005233899, 0.06268486, -0.044923913, 0.015584899, 0.02147083, -0.053774126, -0.0069668186, 0.011331592, -0.0430505, -0.0032039108, -0.013643068, 0.0096913325, -0.039961092, 0.054184962, -0.008979204, -0.036204856, 0.0037574323, -0.016705016, 0.039916243, -0.016381636, -0.08687614, 0.027957242, 0.04948789, 0.031943448, -0.057290174, -0.042277932, -0.023002712, -0.047017496, 0.006684452, 0.054534316, -0.056737285, -0.07498496, -0.009375836, 0.025543522, 0.03028308, -0.06906246, 0.005863897, 0.03279533, 0.023197096, 0.0640316, -0.010762583, -0.03148228, 0.0031338094, -0.0072938614, -0.06358541, -0.005270622, -0.008926155, 0.021963716, -0.05552044, 0.024500206, -0.0036044843, 0.016203098, -0.0019299133, -0.03012397, -0.011156799, 0.06323655, 0.03971083, -0.0037787058, 0.062443055, -0.0064758747, 0.027825642, -0.0058271047, 0.10660979, 0.0768696, -0.005721021, 0.0006469746, -0.0060702893, -0.0037615518, 0.024443692, 0.019890888, 0.0004614053, -0.055237398, -0.061259262, -0.013920842, 0.032681175, 0.013193363, 0.008091507, -0.05888119, 0.028916609, -0.024801744, 0.014784777, 0.043455012, 0.042146776, -0.053490814, -0.026390158, -0.012684587, -0.062528014, 0.0007469724, 0.009444067, 0.055342283, 0.004789, -0.009570944, 0.0647348, -0.05427646, -0.030443273, 0.004453014, -0.0065536685, 0.043011244, 0.007335343, 0.01579795, -0.015037961, -0.062222652, 0.083001934, -0.0071070213, -0.017438611, -0.023761323, 0.039175898, 0.013001254, -0.021472273, -0.03829355, 0.040560693, 0.03135187, -0.03742055, -0.0017571095, -0.031136084, 0.03912493, -0.023099659, -0.042291485, -0.06915903, 0.04400628, 0.06700761, -0.011770504, -0.043494806, 0.04672133, 0.05778405, -0.018912366, -0.022868197, 0.060825825, 0.016874006, 0.0073900563, -0.010002537, 0.021573996, 0.005962376, 0.0491491, 0.03449636, -0.021416446, -0.0072996067, -0.027963754, -0.02216488, -0.0016100897, 0.018953698, -0.01317025, -0.031108452, -0.07793239, -0.040982008, -0.0043924483, -0.020185677, 0.024924824, -0.041641675, -0.026849264, -0.015949076, -0.012861395, 0.017245725, 0.025614774, -0.049223013, -0.036123235, 1.6120146e-06, 0.07790485, 0.019067246, 0.0075618587, 0.04324853, 0.014127279, 0.013150057, 0.0051650223, -0.0032270255, 0.03348731, -0.014980418, 0.0034561425, -0.030796885, -0.009452268, -0.0145541215, 0.049650297, 0.009352835, 0.013921525, -0.006638107, -1.4916843e-05, -0.031857543, 0.048845977, 0.0021973464, -0.0017968399, 0.02209603, 0.02006871, -0.031193376, 0.020376863, 0.014560888, -0.07205752, 0.03282666, 0.0031717056, -0.03392489, 0.025016325, -0.10766173, -0.011725264, -0.07139651, 0.021297976, -0.03277813, -0.027867323, -0.028798854, 0.008917343, 0.07009347, -0.041110456, 0.042566214, -0.054028656, -0.011037139, -0.026996415, -0.07548647, 0.013021667, -0.011179112, -0.003935323, -0.027333036, -0.013578021, 0.064508006, -0.0028996565, -0.06760958, 0.026824463, 0.034613468, -0.012324174, 0.0002846172, -0.04743452, -0.029777672, -0.01504816, -0.0115172, 0.031418037, -0.03131142, 0.046704125, 0.066929944, 0.015085166, 0.0032888376, -0.021353824, -0.042654254, -0.034337036, -0.0053100474, -0.022187805, 0.0035262338, -0.031869933, -0.04224167, -0.011481201, 0.05600788, -0.036872935, -0.00388018, -0.007399795, 0.028899776, 0.021440739, -0.042942062, 0.0030954145, 0.043310046, 0.05675842, -0.06413164, 0.02868405, 0.052379712, -0.010950414, -0.0380795, 0.019054776, -0.04667921, 0.0032908218, 0.027224576, 0.051181495, 0.0003472255, -0.036479842, 0.0024089655, 0.0021863838, -0.038180567, 0.020836549, -0.03288323, -0.03984082, 0.010270869, 0.028481523, -0.1216333, 0.036443643, 0.047073785, -0.021171005, -0.019994492, -0.030081859, 0.040892594, -0.019698361, -0.0036367078, 0.009343664, -0.022612732, 0.032733306, 0.03982301, 0.020052863, -0.00945905, 0.020473236, 0.0006271707, 0.058954712, 0.04027679, 0.005659914, 0.0066413516, 0.009159549, -0.05970646, 0.018969906, -0.025617097, -0.026128853, 0.028940285, 0.020558901, -0.040809028, 0.054443367, -0.004874267, -0.015153521, -0.00024793134, 0.016840119, 0.040159546, 0.002155261, -0.0138193015, 0.02345569, 0.002177301, 0.106234066, 0.01276331, -0.085579954, -0.012877629, 0.046544965, 0.020417461, -0.030211953, 0.035001833, 0.0077106813, 0.01900397, 0.02703751, -0.053472187, -0.019086493, 0.00428958, -0.0069794697, -0.017369961, 0.030781267, 0.03551536, 0.0048415153, 0.008016774, 0.042204764, 0.01922613, 0.04775945, 0.007525864, 0.04958513, -0.016124144, -0.05221883, 0.040309303, -0.017692946, -0.006757297, 0.0021398389, -0.008799435, 0.030151503, -0.023093767, -0.023980128, -0.024815168, 0.040575135, -0.028407246, 0.06408012, -0.049343437, 0.004522241, 0.01135044, -0.0047875787, -0.0014327575, 0.002449477, 0.006380749, 0.012606505, -0.017175775, 0.013629724, -0.014124491, -0.0178965, -0.037766375, 0.0043482524, 0.022445064, -0.040581662, -0.07602456, 0.017128633, -0.030821191, 0.010021304, -0.006262188, 0.037981182, -0.018636422, -0.029575236, -0.06029288, 0.05234343, 0.031536553, 0.035213273, 0.0463015, 0.0036708014, 0.0052345223, -0.050606936, 0.008256714, 0.02625674, -0.009607635, -0.0486939, 0.001669477, -0.071560495, 0.007041467, 0.07489814, -0.035134487, -0.044674326, 0.05438347, 0.013408014, -0.08244932, -0.06348855, -0.039674517, -0.026404835, -0.014855903, 0.005471334, -0.02302797, 0.007746313, -0.024981523, -0.046705868, 0.015537092, 0.017301518, 0.013637719, -0.05366216, -0.040013168, -0.018202893, -0.021289667, 0.007867972, -0.014348681, -0.054169655, -0.048515085, -0.004302536, 0.023561344, -0.05479715, 0.028102312, 0.071422175, -0.058051806, 0.0022482222, 0.01792397, -0.022148492, 0.026408166, -0.024048848, 0.059825547, 0.002632954, -0.0495286, 0.0022784234, 0.038764212, 0.00040144072, 0.030310614, 0.057940416, -0.01508035, -0.055378407, -0.051107764, 0.0038468342, -0.003155755, -0.026685834, 0.053139184, 0.022516226, 0.008175126, 0.016566997, 0.007076917, 0.014594105, 0.031596467, -0.014664266, -0.014177987, 0.0023916138, 0.0011586244, -0.038934156, 0.0031808876, -0.017630463, 0.0031040858, 0.015885863, 0.01965553, 0.02711403, -0.012510712, -0.049734417, 0.043539256, 0.019309346, -0.0727483, 0.00092066504, 0.08422341, -0.036712494, 0.060770884, 0.045213927, -0.0071196854, 0.022853747, -0.08573728, -0.005934812, 0.036175787, -0.03282357, 0.0365851, -0.004212834, -0.04486637, 0.092557974, -0.013356924, -0.06595603, -0.0150398305, -0.025142767, 0.043250445, -0.021360701, 0.049494747, -0.05258313, -0.057783876, -0.058879178, 0.02602606, 0.014588093, 0.08601702, 0.007908378, -0.027793288, 0.013667886, -0.040338863, -0.016787011, -0.030427827, 0.009063525, 0.028942192, 0.025336813, -0.007511073, 0.045527868, -0.02742367, -0.024122508, -0.02945458, 0.022295559, 0.028236434, -0.02587762, 0.014016392, 0.044975262, 0.02490689, 0.008495326, 0.005227856, 0.017179709, 0.0007806002]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   user_id  book_id     timestamp\n",
              "0     4456     8581  1.687541e+09\n",
              "1      142     1964  1.679585e+09\n",
              "2      362     3705  1.706872e+09\n",
              "3     1809    11317  1.673533e+09\n",
              "4     4384     1323  1.681402e+09"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-eced38a0-3f3b-496f-9fca-4c5f32a2da38\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>book_id</th>\n",
              "      <th>timestamp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4456</td>\n",
              "      <td>8581</td>\n",
              "      <td>1.687541e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>142</td>\n",
              "      <td>1964</td>\n",
              "      <td>1.679585e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>362</td>\n",
              "      <td>3705</td>\n",
              "      <td>1.706872e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1809</td>\n",
              "      <td>11317</td>\n",
              "      <td>1.673533e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4384</td>\n",
              "      <td>1323</td>\n",
              "      <td>1.681402e+09</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eced38a0-3f3b-496f-9fca-4c5f32a2da38')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-eced38a0-3f3b-496f-9fca-4c5f32a2da38 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-eced38a0-3f3b-496f-9fca-4c5f32a2da38');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-0233ceed-3b75-4ac2-a3ed-50070fac3502\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0233ceed-3b75-4ac2-a3ed-50070fac3502')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-0233ceed-3b75-4ac2-a3ed-50070fac3502 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(items\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"user_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2098,\n        \"min\": 142,\n        \"max\": 4456,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          142,\n          4384,\n          362\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"book_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4371,\n        \"min\": 1323,\n        \"max\": 11317,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1964,\n          1323,\n          3705\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"timestamp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12801198.97249742,\n        \"min\": 1673533162.0,\n        \"max\": 1706871659.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1679585406.0,\n          1681402162.0,\n          1706871659.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                               Title  \\\n",
              "0  Classification décimale universelle : édition ...   \n",
              "1  Les interactions dans l'enseignement des langu...   \n",
              "2  Histoire de vie et recherche biographique : pe...   \n",
              "3  Ce livre devrait me permettre de résoudre le c...   \n",
              "4                    Les années glorieuses : roman /   \n",
              "\n",
              "                     Author  \\\n",
              "0                       NaN   \n",
              "1  Cicurel, Francine, 1947-   \n",
              "2                       NaN   \n",
              "3     Mazas, Sylvain, 1980-   \n",
              "4   Lemaitre, Pierre, 1951-   \n",
              "\n",
              "                                          ISBN Valid     Publisher  \\\n",
              "0                          9782871303336; 2871303339   Ed du CEFAL   \n",
              "1                          9782278058327; 2278058320        Didier   \n",
              "2                          2343190194; 9782343190198   L'Harmattan   \n",
              "3  9782365350020; 236535002X; 9782365350488; 2365...       Vraoum!   \n",
              "4  9782702180815; 2702180817; 9782702183618; 2702...  Calmann-Lévy   \n",
              "\n",
              "                                            Subjects  book_id           ISBN  \\\n",
              "0  Classification décimale universelle; Indexatio...        0  9782871303336   \n",
              "1  didactique--langue étrangère - enseignement; d...        1  9782278058327   \n",
              "2  Histoires de vie en sociologie; Sciences socia...        2     2343190194   \n",
              "3  Moyen-Orient; Bandes dessinées autobiographiqu...        3  9782365350020   \n",
              "4  France--1945-1975; Roman historique; Roman fra...        4  9782702180815   \n",
              "\n",
              "                                    google_api_title      author_clean  \\\n",
              "0                Classification décimale universelle               NaN   \n",
              "1   Les interactions dans l'enseignement des langues  Cicurel Francine   \n",
              "2          Histoire de vie et recherche biographique               NaN   \n",
              "3  Ce livre devrait me permettre de résoudre le c...     Mazas Sylvain   \n",
              "4                              Les années glorieuses   Lemaitre Pierre   \n",
              "\n",
              "                                      embedded_title  \n",
              "0  [-0.010769891, -0.087789156, -0.048586313, 0.0...  \n",
              "1  [0.027142433, -0.020540524, -0.0023190805, 0.0...  \n",
              "2  [0.05334512, -0.03868564, -0.003815435, -0.027...  \n",
              "3  [0.02292607, -0.039551307, -0.024395213, -0.00...  \n",
              "4  [0.027675966, -0.01612932, -0.01800864, 0.0196...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-352f57b6-53df-42fa-8350-bd0ca8ef150b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Title</th>\n",
              "      <th>Author</th>\n",
              "      <th>ISBN Valid</th>\n",
              "      <th>Publisher</th>\n",
              "      <th>Subjects</th>\n",
              "      <th>book_id</th>\n",
              "      <th>ISBN</th>\n",
              "      <th>google_api_title</th>\n",
              "      <th>author_clean</th>\n",
              "      <th>embedded_title</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Classification décimale universelle : édition ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>9782871303336; 2871303339</td>\n",
              "      <td>Ed du CEFAL</td>\n",
              "      <td>Classification décimale universelle; Indexatio...</td>\n",
              "      <td>0</td>\n",
              "      <td>9782871303336</td>\n",
              "      <td>Classification décimale universelle</td>\n",
              "      <td>NaN</td>\n",
              "      <td>[-0.010769891, -0.087789156, -0.048586313, 0.0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Les interactions dans l'enseignement des langu...</td>\n",
              "      <td>Cicurel, Francine, 1947-</td>\n",
              "      <td>9782278058327; 2278058320</td>\n",
              "      <td>Didier</td>\n",
              "      <td>didactique--langue étrangère - enseignement; d...</td>\n",
              "      <td>1</td>\n",
              "      <td>9782278058327</td>\n",
              "      <td>Les interactions dans l'enseignement des langues</td>\n",
              "      <td>Cicurel Francine</td>\n",
              "      <td>[0.027142433, -0.020540524, -0.0023190805, 0.0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Histoire de vie et recherche biographique : pe...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2343190194; 9782343190198</td>\n",
              "      <td>L'Harmattan</td>\n",
              "      <td>Histoires de vie en sociologie; Sciences socia...</td>\n",
              "      <td>2</td>\n",
              "      <td>2343190194</td>\n",
              "      <td>Histoire de vie et recherche biographique</td>\n",
              "      <td>NaN</td>\n",
              "      <td>[0.05334512, -0.03868564, -0.003815435, -0.027...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Ce livre devrait me permettre de résoudre le c...</td>\n",
              "      <td>Mazas, Sylvain, 1980-</td>\n",
              "      <td>9782365350020; 236535002X; 9782365350488; 2365...</td>\n",
              "      <td>Vraoum!</td>\n",
              "      <td>Moyen-Orient; Bandes dessinées autobiographiqu...</td>\n",
              "      <td>3</td>\n",
              "      <td>9782365350020</td>\n",
              "      <td>Ce livre devrait me permettre de résoudre le c...</td>\n",
              "      <td>Mazas Sylvain</td>\n",
              "      <td>[0.02292607, -0.039551307, -0.024395213, -0.00...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Les années glorieuses : roman /</td>\n",
              "      <td>Lemaitre, Pierre, 1951-</td>\n",
              "      <td>9782702180815; 2702180817; 9782702183618; 2702...</td>\n",
              "      <td>Calmann-Lévy</td>\n",
              "      <td>France--1945-1975; Roman historique; Roman fra...</td>\n",
              "      <td>4</td>\n",
              "      <td>9782702180815</td>\n",
              "      <td>Les années glorieuses</td>\n",
              "      <td>Lemaitre Pierre</td>\n",
              "      <td>[0.027675966, -0.01612932, -0.01800864, 0.0196...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-352f57b6-53df-42fa-8350-bd0ca8ef150b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-352f57b6-53df-42fa-8350-bd0ca8ef150b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-352f57b6-53df-42fa-8350-bd0ca8ef150b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-2a747dc9-01bb-4736-9cbd-608bc7baf984\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2a747dc9-01bb-4736-9cbd-608bc7baf984')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-2a747dc9-01bb-4736-9cbd-608bc7baf984 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(items\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Les interactions dans l'enseignement des langues : agir professoral et pratiques de classe /\",\n          \"Les ann\\u00e9es glorieuses : roman /\",\n          \"Histoire de vie et recherche biographique : perspectives sociohistoriques /\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Author\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Cicurel, Francine, 1947-\",\n          \"Mazas, Sylvain, 1980-\",\n          \"Lemaitre, Pierre, 1951-\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ISBN Valid\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"9782278058327; 2278058320\",\n          \"9782702180815; 2702180817; 9782702183618; 2702183611\",\n          \"2343190194; 9782343190198\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Publisher\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Didier\",\n          \"Calmann-L\\u00e9vy\",\n          \"L'Harmattan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Subjects\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"didactique--langue \\u00e9trang\\u00e8re - enseignement; didactique--langue - enseignement\",\n          \"France--1945-1975; Roman historique; Roman fran\\u00e7ais; Litt\\u00e9rature fran\\u00e7aise\",\n          \"Histoires de vie en sociologie; Sciences sociales--M\\u00e9thodologie; Actes de congr\\u00e8s\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"book_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          4,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ISBN\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"9782278058327\",\n          \"9782702180815\",\n          \"2343190194\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"google_api_title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Les interactions dans l'enseignement des langues\",\n          \"Les ann\\u00e9es glorieuses\",\n          \"Histoire de vie et recherche biographique\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"author_clean\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Cicurel Francine\",\n          \"Mazas Sylvain\",\n          \"Lemaitre Pierre\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embedded_title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"[0.027142433, -0.020540524, -0.0023190805, 0.023604088, 0.00027529796, 0.017977564, 0.03452997, -0.0474766, 0.015225577, 0.052039135, -0.00036042446, -0.02997406, -0.040366422, -0.04519187, 0.054508, -0.015482123, 0.044681873, -0.022422874, 0.012578571, 0.013673336, -0.011722488, 0.037818618, 0.00047222737, -0.008002775, 0.0016725715, 0.0016066253, 0.018150209, -0.039469957, -0.036887415, 0.016883975, -0.026982145, -0.00012661815, -0.0479128, -0.013174155, -0.026351985, -0.010624157, -0.009502069, 0.025267933, 0.0059955204, -0.01497183, -0.018615108, -0.018552283, -0.021930577, -0.05262457, 0.014632506, -0.037593767, 0.04726378, 0.048031423, -0.02075533, -0.061559338, 0.046888605, 0.024475658, 0.053917464, -0.042040538, 0.025207626, -0.034834586, 0.051548373, 0.038185775, -0.04597259, -0.03408335, -0.017298982, -0.011119516, -0.021341119, 0.06149526, -0.027499536, -0.0013943925, -0.060791872, 0.021295832, 0.019536817, -0.017450517, -0.017689848, -0.06287969, 0.029029777, -0.02794013, -0.020892581, -0.04343794, -0.04452916, 0.023062805, -0.00036030143, 0.054810304, -0.0047882353, -0.051674634, -0.008209593, -0.022826323, -0.082769275, 0.068403944, -0.035857156, 0.0375038, 0.021837747, 0.055980682, -0.058682214, -0.009989164, 0.028589092, -0.017329454, -0.043501, 0.031127524, -0.036791977, 0.03487207, 0.015865752, -0.013901644, -0.031382207, -0.008825678, -0.032679196, -0.0025112326, 0.039644744, 0.047850776, 0.039480958, 0.048473414, -0.022966089, 0.10160202, -0.03141435, -0.013210424, 0.030554524, -0.01766168, 0.026016774, -0.036637027, 0.002638637, 0.04644098, 0.046249747, -0.027496457, 0.026132066, -0.032983944, 0.045741774, -0.011702804, 0.041001625, 0.025523838, 0.01317721, 0.00035619808, 0.07138686, 0.032006413, 0.048128605, -0.05937428, 0.00047666268, 0.07768457, 0.065745614, 0.045708887, 0.05167484, 0.036699127, 0.044075888, 0.07544025, 0.005563494, 0.022931388, -0.021448877, 0.027738836, -0.06049568, 0.023898775, 0.00097041833, -0.030736338, 0.011460269, -0.06485867, -0.051330857, -0.02421889, -0.07106928, 0.066800945, 0.028246626, -0.00790841, -0.041564103, 0.016247021, 0.025421785, 0.01555347, 0.08140845, 0.0577104, 0.0088178655, 0.036845792, -0.03420963, 0.046915133, 0.054541215, -0.03477154, 0.002024032, -0.023456711, -0.0026599984, 0.00030727475, -0.04497442, -0.066424005, -0.0059845923, -0.013414577, -0.0066634766, -0.02254938, -0.025936583, 0.036816612, -0.07114239, -0.056953337, 0.014362161, 0.067963056, 0.05647313, -0.033586144, 0.053269226, -0.035377096, -0.075625084, -0.008647449, -0.006991434, -0.02161103, -0.023115618, -0.014669223, -0.035286196, 0.035241105, -0.010157574, 0.041964203, -0.024342932, -0.04491534, 0.01686072, 0.15007725, 0.017567854, -0.035057317, 0.04989487, -0.014410196, 0.079849645, -0.017984387, -0.037877683, -0.0055427905, -0.010605255, -0.00210061, -0.045535047, 0.026422907, 0.031879693, 0.030605959, -0.039241064, -0.0022882447, 0.034980163, -0.023993803, 0.020393644, -0.042346653, -0.0027872066, 0.034238987, 0.059073377, 0.017745376, -0.04757955, 0.008928198, -0.028489241, -0.07162072, 0.02280017, 0.047385976, 0.03564407, -0.024998993, 0.039792977, -0.016960151, 0.032625016, 0.0129018035, -0.015292085, 0.008901555, -0.02357029, 0.024863329, 0.057376962, 0.0350781, -0.0038111345, 0.039647583, 0.041311458, -0.012593854, 0.0018220166, 0.021582518, -0.021053622, -0.034413863, -0.006093655, 0.0035802536, -0.099609435, 0.06062294, -0.045883697, 0.015404698, 0.05195159, -0.0031022963, 0.03593992, -0.01619717, -0.0125057595, 0.008115051, -0.06305949, -0.028146092, -0.006884062, -0.014162648, -0.0024771597, 0.02552344, 0.025560796, -0.02124001, 0.043573078, 0.021116368, -0.020735782, 0.021645702, -0.0151948705, 0.024453921, -0.005332919, -0.020161852, 0.04281293, 0.053196747, 0.04405796, -0.04416026, -0.03456636, -0.014575961, -0.037296478, -0.0079966355, 0.029502595, -0.06808372, -0.008822236, -0.017506994, 0.016490726, -0.026405796, -0.026769735, 0.0039468133, -0.019438442, 0.032521147, 0.034848552, -0.003946603, -0.008732273, 0.0018336158, 0.021767413, -0.054527342, 0.015800785, 0.0014758749, -0.01063531, -0.05791201, 0.00052916515, -0.052595764, 0.018992908, -0.008620502, -0.024105137, -0.024837466, 0.07343456, 0.062475417, -0.019602142, 0.03071076, -0.021263797, -0.0110718, 0.021765262, 0.05769195, 0.045456357, 0.023844184, 0.024824353, -0.02713382, 0.0009197075, -0.008068059, -0.017499084, -0.012494596, 0.007510915, -0.03325832, -0.027686281, 0.05490669, -0.006310222, -0.047434274, -0.056527544, -0.0089846775, -0.013240663, -0.0010106497, 0.053647455, 0.034933154, -0.021958398, -0.035121836, 0.025348684, -0.031152863, -0.038679533, -0.02513186, 0.049870543, 0.020197157, 0.013573011, 0.053801503, -0.018113049, 0.0037997488, 0.012524442, 0.014127857, 0.055704948, 0.0063386154, 0.03573338, 0.022263717, -0.048880633, 0.05421723, -0.043142587, 0.008278142, -0.0018842363, -0.0019881167, 0.021565609, -0.004158469, -0.041573554, 0.027059488, 0.04140609, -0.04944458, 0.014455445, -0.010858066, 0.017114727, -0.03130681, -0.0067054317, -0.0057035675, 0.04610465, 0.02261927, 0.013902956, 0.0038330597, 0.026624646, 0.02378961, -0.0025881017, 0.0019414292, 0.08277258, 0.011877566, -0.020440238, 0.012699574, 0.0029269585, 0.035966042, 0.04744884, -0.045271445, 0.0128725795, 0.008546885, 0.010560749, -0.05012447, 0.023312261, -0.027402062, -0.040561896, -0.038486872, -0.0966242, 0.0051060393, -0.044217866, -0.022205105, 0.0027858939, -0.04664835, -0.041451372, 0.014975611, -0.015550401, 0.041514426, 0.0038345049, -0.029247422, -0.093997, -0.011456004, 0.034223843, -0.03410642, 0.041151408, 0.008716024, -0.02033994, -0.027159711, 0.0046082195, 0.009262975, 0.011146299, -0.0587786, 0.014949512, -0.010005044, -0.011555668, -0.022643434, 0.034462105, 0.014552569, -0.0060608005, 0.016013876, -0.008711371, -0.035508018, 0.03767841, 0.027342811, -0.0007955024, -0.018068457, 0.009145835, -0.046850394, -0.006373148, 0.030661652, -0.0870119, 0.01744904, 0.0067371367, -0.023716886, 0.03363879, -0.10733218, 0.053184997, -0.07844081, 0.002832561, -0.031800993, -0.0068189506, -0.033438288, -0.0050861645, 0.051835146, -0.026986623, 0.015037746, -0.02231085, -0.033744946, -0.07039597, -0.0739481, 0.007951557, -0.0237737, 0.042215582, 0.0069665783, 0.004247615, 0.05101054, -0.024597913, -0.04031547, 0.0038964679, -0.0060009854, -0.07562473, -0.02487762, -0.08801289, -0.013061932, -0.02354606, -0.0045180195, 0.018833924, -0.039785087, 0.027867293, 0.0123066055, -0.02491561, -0.022141404, -0.031045975, -0.061284263, -0.057623174, 0.024396464, -0.035052303, 0.02190675, 0.02861147, -0.02831549, 0.013814254, 0.03379243, 0.008799612, -0.008985111, 0.02473169, 0.035441443, -0.0065674633, -0.049922265, -0.01395163, -0.008170894, 0.097359784, -0.025037477, 0.009940462, 0.047850978, 0.009716014, -0.06050233, -0.0053205322, -0.004911557, 0.09569588, -0.039645426, 0.021967655, -0.031756643, -0.024276247, -0.03609301, -0.03808405, -0.028172335, 0.067122124, -0.031103345, -0.062894486, -0.007605858, -0.011416188, -0.07815174, -0.02522963, 0.034591857, -0.0029417695, 0.0035066295, -0.019837245, 0.06540605, -0.047672562, 0.0024494422, -0.010271298, -0.011683429, -0.013220007, 0.031526968, 0.026978439, -0.01317559, 0.034454472, 0.0036316493, 0.03858765, 0.03327432, 0.0067307693, 0.016706105, 0.039433118, -0.058149464, 0.051281277, -0.06060769, -0.050163772, 0.0073816217, 0.029024001, -0.029151313, -0.0023354492, 2.3504716e-05, -0.02803457, 0.020090759, 0.012836656, 0.010128475, -0.0498842, 0.017088287, 0.033801958, -0.0016850217, 0.06433099, 0.03772622, -0.051111512, -0.0136458855, 0.03284268, -0.03914711, -0.044828914, 0.029353814, 0.03176771, 0.04982787, -0.009347002, -0.0047025043, 0.0049502836, -0.018715525, 0.0034758367, -0.0348739, 0.030821221, -0.015568467, -0.011095636, 0.06839485, 0.017524634, 0.034052003, 0.01964667, 0.0144328615, 0.034035083, 0.0020167644, -0.014245227, 0.03581507, -0.022901969, -0.019622548, 0.037305646, 0.011413001, 0.020275563, -0.015900897, -0.024980197, -0.016915193, 0.014792825, -0.0043827705, 0.06033795, -0.027224954, 0.031051533, 0.0018879907, -0.0015919221, 0.022977872, -0.008529422, 0.029175201, -0.011882022, -0.0030052636, 0.008843563, -0.03773693, -0.018831575, 0.0026362718, 0.021863792, 0.008598345, -0.0010849979, -0.051589943, -0.0147834, -0.015793372, 0.027256852, -0.03887631, 0.048800655, -0.039819937, -0.015114874, -0.03089365, 0.08536702, 0.05948463, 0.03466869, 0.06610413, 0.017570777, -0.016509663, -0.089170516, 0.031086152, 0.011019665, -0.012326908, -0.023361519, 0.01575868, -0.061152715, 0.012428684, 0.03839507, -0.044189308, -0.025259307, 0.041219506, 0.022230746, -0.09707367, -0.051984686, -0.029335786, -0.05236734, -0.029908493, -0.01357844, -0.049437784, 0.033300143, 0.039269578, -0.02440647, 0.003969735, 0.041075632, 0.010139068, -0.012995733, -0.007494727, -0.028705698, 0.00082188204, -0.008809902, -0.018740565, -0.052104127, -0.056353454, -0.0031758966, 0.012661097, -0.028962532, 0.058633227, 0.030502062, -0.048844095, 0.006302846, -0.0108178435, -0.025131682, 0.017953945, -0.018075408, 0.018053927, -0.026429, -0.032170933, -0.004405795, 0.012295216, -0.023467956, 0.042460695, 0.023037596, -0.031674184, -0.036564704, -0.055931523, -0.019010633, -0.025046764, -0.0712555, 8.611861e-05, 0.0057757758, 0.026232066, 0.0092142075, 0.03525938, 0.022571806, 0.08190164, -0.0033449698, -0.021198032, -0.04860236, 0.013574752, -0.035698395, 0.016163062, -0.023340048, -0.014989142, 0.028393093, 0.006529506, 0.010815611, -0.032567035, -0.046195365, 0.032816473, 0.017748706, -0.02049762, -0.013504844, 0.02878078, -0.036764104, 0.075626776, 0.019785877, 0.020972997, 0.031728398, -0.083044425, -0.02931215, 0.032899506, -0.028159846, 0.03026393, -0.009694038, 0.0058308886, 0.08435889, -0.053855337, -0.0041955337, 0.0067178835, -0.000500954, 0.059708435, -0.03473651, 0.035806242, -0.07816992, -0.081534356, -0.081089124, 0.03987137, 0.02991362, 0.081208974, 0.011049659, -0.053723138, -0.00076049764, -0.0312624, 0.025069578, -0.04062, -0.025072401, 0.00048030837, 0.052829657, 0.02125865, 0.050059285, -0.06767218, -0.015226169, -0.013393508, 0.027979143, 0.046253514, -0.016436914, -0.007504613, 0.036668144, 0.01840988, 0.035528705, 0.04147602, -0.02025752, 0.022766791]\",\n          \"[0.027675966, -0.01612932, -0.01800864, 0.019673012, 0.08769466, 0.0014769429, 0.010704665, -0.005236023, 0.047188684, 0.03761532, -0.016372254, 0.015939767, 0.004009486, -0.04007521, 0.024605079, -0.03173427, 0.030920763, 0.03988214, 0.012887524, -0.03022114, -0.015708633, 0.059043355, -0.016023291, -0.0025308754, -0.04073864, -0.020692555, 0.016963478, -0.07814157, -0.022853358, 0.020579195, -0.03407056, -0.0009133024, -0.08117961, 0.019255063, 0.012193699, -0.06767274, 0.045964666, 0.024942322, 0.004203056, 0.025900425, -0.0016766512, -0.050967444, -0.0025331134, -0.0070740036, -0.017477605, -0.048568357, 0.032993488, 0.04355646, 0.026935793, -0.011673787, 0.02362909, 0.021656943, 0.0323811, -0.03568458, 0.016999958, -0.018094022, 0.057677917, -0.026483634, -0.06923171, -0.015768759, 0.048599586, -0.012578989, -0.0045933896, 0.117373705, -0.0022148765, 0.0087092025, -0.0121498285, 0.0010725158, 0.018069291, -0.029773567, -0.0065932665, -0.058149047, 0.012317347, -0.020933958, -0.0029607306, -0.071151935, -0.010031551, 0.050417494, 0.01571768, 0.05829994, -0.031246232, -0.059578426, -0.06458616, -0.06434521, -0.11007681, -0.0056985705, -0.043544326, -0.004529563, 0.026534904, 0.030224213, -0.006699872, -0.007103079, 0.052954294, -0.024562245, -0.03467211, 0.029829651, -0.02841984, -0.022974577, 0.0036460643, -0.027065475, 0.007957817, -0.024981046, -0.043634426, 0.004404129, 0.020623393, -0.005649733, -0.008119603, 0.037668515, 0.0076730195, 0.013393152, -0.07156598, -0.04496251, 0.0020098502, -0.011508041, 0.045349885, -0.02522553, -0.023734875, 0.08672422, 0.050680164, 0.0198079, -0.013141651, 0.0037596012, 0.04458242, -0.00033742396, -0.003432677, -0.04174845, -0.01704, 0.012852614, 0.07272834, 0.023587443, -0.0077364137, -0.033728167, 0.03521725, 0.026903296, 0.044284433, 0.05662702, 0.07743406, 0.017095689, 0.02821482, 0.08341511, -0.0010819075, 0.0060468814, -0.05681742, 0.050414428, -0.04712003, 0.042968903, -0.02288141, -0.03897936, 0.039459962, -0.0141917085, -0.018188039, 0.027760865, -0.037837904, 0.0067343274, 0.04386743, 0.003132913, 0.0075851004, 0.019935615, -0.020300878, 0.017186366, 0.050820228, 0.030662283, 0.009661271, -0.0046147867, -0.04283695, 0.017464038, 0.037063424, 0.028257443, 0.021280915, 0.0013056456, -0.012006613, 0.025307624, -0.05520984, -0.0548776, -0.0023381659, -0.006577864, -0.022175927, 0.01845564, -0.011816793, -0.025315449, -0.01844265, -0.058456443, 0.032645937, 0.090748034, 0.04877724, -0.043265507, 0.0295654, -0.053176194, -0.03486045, 0.03926745, -0.020162154, -0.029962305, -0.027866887, -0.00030181682, -0.024843324, 0.0048829764, 0.03379248, 0.0054697907, 0.03864054, -0.044570196, 0.020876372, 0.050190754, 0.036993105, -0.042230647, -0.005957735, -0.023794057, 0.07518761, 0.0016025587, -0.030024076, 0.022407368, -0.055284034, 0.0257843, -0.04810012, 0.02377809, 0.059912764, 0.019271413, -0.032413855, 0.025026409, -0.008705957, -0.042916957, -0.0059005506, -0.002629854, -0.065149724, 0.02793766, 0.018158302, 0.06561853, -0.07060635, 0.038004383, -0.0020515942, -0.06500418, 0.037001856, 0.053380176, 0.03387651, -0.0096498635, 0.065369576, -0.012048983, 0.05130614, 0.016552823, 0.0028370486, 0.0043916157, -0.016337922, 0.08983495, 0.034016266, -0.023891885, -0.039697934, -0.0058055203, -0.00906385, 0.032780714, 0.0009496314, 0.053801235, -0.00042002762, -0.05333777, 0.014142019, 0.0064763557, -0.021699158, 0.08151805, -0.07694629, -0.01921763, 0.019488262, 0.0072593256, 0.03883878, -0.0019574403, 0.03849201, -0.013261135, -0.059373863, -0.008145858, 0.007444049, -0.002457871, 0.032179423, -0.020000542, 0.015337558, 0.01255017, 0.009872871, 0.015436845, -0.026779529, 0.003436445, -0.054981563, 0.027686138, -0.0016216725, -0.013636503, 0.0113748815, 0.045526583, 0.032431882, -0.0319864, -0.010411737, -0.005455975, -0.03377873, -0.016305279, 0.05518679, -0.036521833, -0.0631332, -0.005139374, 0.019523894, 0.019637423, -0.06632776, -0.045619722, -0.058334578, 0.025116371, -0.015115836, -0.02673088, -0.0045423615, -0.009782015, 0.0240998, -0.09860343, 0.003611928, 0.05252091, 0.020025449, -0.06811288, 0.01391455, -0.031722445, 0.014957263, -0.015364046, -0.047692735, -0.022694254, 0.0760938, 0.04835445, -0.028068243, 0.041305497, -0.0054453714, 0.030571198, 0.012924156, 0.118531026, -0.004661583, 0.011725988, -0.0021956384, -0.026064696, -0.0024054935, 0.002144951, -0.026255423, 0.0064709187, -0.013892847, -0.03151195, 0.020829773, 0.017528903, 0.041837968, 0.016407095, -0.027098997, -0.021811577, -0.033093296, 0.013941682, 0.0143096065, 0.006511291, -0.03181643, 0.006894264, 0.009564878, -0.027546357, -0.01158202, 0.0069181626, 0.05081759, 0.040569328, -0.028530339, 0.056301963, -0.022616893, -0.0038847341, -0.014485847, 0.033814427, 0.077356376, -0.041799184, 0.0584242, -0.033250395, -0.01642551, 0.0330074, -0.012425451, -0.007753761, -0.030952455, 0.065939896, 0.04130442, -0.021447025, -0.0124002015, 0.0013733932, -0.0010912487, -0.01946465, 0.021435713, 0.0071981526, -0.015114469, 5.1663414e-05, -0.06416092, -0.03810816, 0.04617874, 0.030577064, -0.039076257, -0.05411576, 0.07140274, 0.053727534, 0.021613533, -0.010445244, 0.04294357, 0.03607126, 0.00045055617, 0.035061814, 0.020898245, 0.0400037, 0.10034637, 0.027788682, -0.03512738, -0.0134721445, 0.0003513701, -0.013834071, 0.009900359, -0.028441945, -0.008304218, -0.023436388, -0.048222836, -0.039695732, 0.016395189, -0.022153959, -0.02089958, -0.036257826, -0.041326817, -0.008058679, 0.04642291, -0.004465084, 0.008230223, -0.062921904, -0.044184145, 0.013146781, 0.08177235, 0.024453985, 0.016383596, 0.008152205, -0.012304891, -0.018541295, 0.014353672, -0.014510783, 0.018932883, -0.027113035, -0.0064370856, -0.06366259, -0.018246682, 0.020128, 0.06900221, 0.015200609, 0.024608895, 0.015775722, -0.01994665, -0.015818736, 0.037445914, -0.0034323533, -0.04521333, -0.001612955, -0.0050725294, -0.039193094, 0.035449997, -0.012086672, -0.08428125, -0.0088579785, -0.012092078, -0.08069083, 0.047093075, -0.05322072, -0.008609815, -0.069364436, -0.030420432, -0.03122492, -0.0030653144, -0.036007345, -0.008546834, 0.039641444, -0.016551128, 0.03993006, -0.031430162, -0.041737508, -0.026878018, -0.069476835, 0.014932759, -0.00014464739, 0.01760366, 0.01683364, -0.014240731, 0.0657493, 0.015695214, -0.042684376, -0.057617, -0.00467858, -0.039027512, 0.01491829, -0.06014583, -0.021504562, -0.07206856, -0.022239447, -0.0255402, -0.030811481, 0.04251652, 0.043125328, 0.0031627275, -0.0069473227, 0.004316198, -0.071415074, -0.010020968, 0.02281009, -0.021734204, 0.0003373096, -0.016529465, -0.03294286, -0.0272521, 0.017854195, 0.009275156, -0.03547088, 0.009734336, -0.03088642, -0.0015759157, -0.0012967673, -0.011490113, 0.0005814644, 0.060421813, -0.03301611, -0.01231995, 0.017018076, 0.0013539401, -0.005369835, 0.030433385, -0.025683973, 0.059653193, 0.011631123, 0.055976342, -0.016335404, -0.0386575, 0.01385507, 0.0007230891, -0.0151380515, 0.024919085, -0.06017463, -0.048220735, 0.005097666, 0.045513146, -0.01894805, 0.002825925, 0.0590752, -0.016258385, 2.7603073e-06, 0.010392405, 0.08111331, 0.00660095, 0.0104566, 0.03462871, -0.008173586, -0.015932271, 0.02203306, 0.014376814, -0.034793016, 0.0010091469, 0.009408765, 0.025122888, 0.037452765, -0.0065730573, 0.013123663, 0.010308766, -0.07098793, 0.03411925, -0.04683957, -0.013280506, -0.03233291, 0.030746462, -0.0229811, 0.06990299, 0.0113449115, -0.044929266, -0.038195364, -0.020347761, 0.014470902, 0.0054418365, -0.037563495, -0.013889957, -0.023238225, 0.07328361, 0.03168113, -0.025752222, -0.012130841, 0.053192914, -0.013078436, -0.02072352, 0.045382317, 0.04460789, -0.03828968, 0.0027211078, -0.06356088, 0.0061691534, -0.018233955, 0.0007499137, -0.023740232, 0.04439971, -0.022003299, 0.010365031, -0.009215394, 0.0040893084, 0.013858671, -0.034705628, -0.004722424, 0.055659197, 0.0123139, -0.054872423, 0.01825299, -0.027131774, -0.0294574, -0.018494865, -0.020046894, -0.0077307275, 0.0047810683, -0.011382611, -0.033190183, 0.032056194, -0.030049503, 0.047765687, -0.031619452, -0.008771251, -0.011424602, 0.017476402, 0.007484648, 0.0024974286, -0.004101797, -0.0030271013, -0.021823222, 0.02989468, -0.03326814, -0.027371842, 0.019614125, 0.058687408, 0.052148078, -0.03186921, -0.042316616, 0.021750579, -0.024660269, 0.07660149, 0.026324268, 0.0777513, 0.03646266, 0.020851387, -0.0315803, 0.032615405, 0.025321182, 0.060765926, 0.048275366, -0.0026019288, 0.025151078, -0.09037988, 0.009021032, -0.006359098, -0.005570726, -0.037879802, 0.021299742, -0.062342457, 0.01798802, 0.014602596, -0.054039486, -0.024831016, 0.083493255, -0.003513094, -0.09037449, -0.07484794, -0.05158382, -0.03678857, 0.019955486, -0.054251548, 0.024334233, 0.012189318, 0.013998879, -0.07653803, -0.001718273, 0.02270536, -0.008967865, -0.014876336, 0.0075326655, -0.07057929, -0.040501736, -0.014931589, -0.0061304853, -0.05611491, -0.0628631, -0.025042905, 0.016529433, -0.053267516, 0.035220414, 0.051314954, -0.019800032, -0.0187396, 0.03594137, -0.029316759, 0.029639842, -0.01992964, 0.035974585, -0.0053622224, -0.06312758, -0.010742655, 0.00526042, -0.039760027, 0.05622947, 0.031675894, -0.0077257953, -0.022595976, -0.05521128, 0.046031974, -0.00045437642, 0.0077672335, 0.034348994, 0.016287358, -0.010698653, 0.030355927, -0.043612383, -0.0066668135, 0.042104576, -0.025710344, 0.009196928, 0.033567633, 0.008937168, -0.035637718, -0.014567004, 0.012291415, 0.017134469, 0.03787628, 0.05196295, -0.00070549204, 0.0073756604, -0.06063891, 0.027032394, -0.01596697, -0.028449211, -0.00155747, 0.017781194, -0.06589172, 0.089242466, -0.0029324435, 0.014563134, 0.01385987, -0.08555971, -0.0352584, 0.0051131835, -0.04445287, 0.029864473, 0.010322693, -0.01683466, 0.071051225, -0.025775362, -0.01133975, -0.01596289, 0.0021871894, 0.06297361, -0.018191455, 0.01467534, -0.038454555, -0.07423649, -0.032458577, 0.009555706, -0.011337193, 0.02269034, 0.049823597, -0.035507333, -0.05329748, -0.060757328, -0.039041303, -0.00012414607, 0.047837537, 0.025653662, 0.029209865, 0.115555964, 0.02340641, -0.029865667, -0.025147354, -0.012347484, -0.00016333566, 0.009588136, -0.062415633, 0.0024092172, -0.017962312, 0.033762064, 0.010857769, -0.018301006, -0.012766848, -0.056348305]\",\n          \"[0.05334512, -0.03868564, -0.003815435, -0.027850023, 0.053773407, -0.0071435045, -0.0111352755, -0.026881963, -0.01871548, 0.041413337, 0.022343365, -0.023239233, -0.012897725, -0.011550138, 0.04171863, -0.01794159, 0.024748972, 0.020319102, -0.024958853, -0.026163878, -0.0034447275, 0.0443265, -0.034647644, -0.0304099, -0.015763383, -0.04701259, 0.013211924, -0.0859851, -0.018593837, 0.03989899, -0.05635889, 0.0076722833, -0.04759918, 0.027307916, -0.0002726291, -0.037822522, 0.03143109, -0.0016388495, -0.0030644727, 0.028814116, -0.0016515774, -0.021339208, -0.026085967, -0.035034984, 0.00885767, -0.019883707, 0.049804717, 0.051875707, 0.018189449, -0.054355755, 0.027847763, 0.014522491, 0.027856683, -0.040951136, 0.047992386, -0.043827225, 0.06755898, 0.017863216, -0.055008974, -0.0009697866, 0.029096825, -0.0025427376, -0.043893833, 0.09491934, 0.028452499, -0.012437704, 0.016564261, 0.005197711, 0.03717712, -0.003757467, 0.026775239, -0.025553681, 0.04741475, -0.041754063, -0.06477641, -0.029253524, -0.050278567, 0.027960503, 0.027428921, 0.0122253215, -0.020352153, -0.044482518, -0.03258776, -0.022380956, -0.077032484, 0.042114962, -0.014324117, 0.006950146, -0.0024551142, 0.043540474, -0.048193455, -0.046761446, 0.037963994, -0.040826615, -0.040466733, 0.025545632, -0.07005082, -0.010861434, 0.012878206, -0.021318419, 0.014157929, -0.037048455, -0.044304844, 0.016764566, -0.017363299, -0.014922313, 0.03220124, 0.032717615, -0.010233005, 0.07573268, -0.037230313, -0.044922333, -0.0036990158, 0.0071796356, 0.03589815, -0.010331555, -0.0388288, 0.008191538, 0.035142653, 0.023591157, 0.044057913, -0.0010384555, 0.022635907, 0.00015242462, 0.057561625, -0.015496639, -0.010376354, 0.0052072946, 0.057756096, 0.029053751, 0.01838159, -0.052449748, 0.0047794417, 0.029515006, 0.037543293, 0.05098097, 0.08702503, 0.035573408, 0.04176663, 0.071972124, -0.015004921, 0.023894034, -0.002637107, 0.061491117, -0.041956566, 0.042618055, -0.023593375, -0.032825354, 0.0024061704, -0.008718, -0.0011018572, -0.038745172, -0.049942303, 0.045215692, 0.08674108, -0.008502659, -0.009508976, 0.042957895, 0.018410604, -0.021588245, 0.06622194, 0.015338091, 0.009098114, 0.045558944, -0.04583623, 0.018795175, 0.0337645, -0.00131688, 0.002292315, 0.0024526683, 0.0042728833, 0.01907755, -0.040411614, -0.044386223, -0.015339377, -0.07895421, -0.027505782, -0.01355952, -0.06536835, 0.00048652396, -0.014855626, 0.0035582625, -0.012949567, 0.025742594, 0.04078109, -0.008620362, 0.016935024, -0.04468814, -0.036431212, 0.013336837, 0.012380788, -0.016363306, -0.039013725, 0.0069572837, -0.0071046595, 0.050747424, -0.002046442, 0.007529746, 0.040320273, -0.033236474, -0.0046072844, 0.0760783, 0.01565941, -0.025597537, -0.024123866, -0.029292993, 0.0660606, -0.050358463, -0.009716832, 0.038640767, -0.06321313, 0.030134978, -0.03052134, 0.060070433, 0.04815661, -0.029793883, 0.012571778, 0.024917984, 0.013314703, -0.049185816, 0.012817417, 0.0065044807, -0.026436996, 0.016474508, 0.022131866, 0.05499648, -0.095696665, 0.05598576, -0.00959332, -0.07994606, 0.025739187, 0.048553877, -0.012984153, -0.043573402, 0.03212413, -0.02367307, 0.018609053, 0.033829954, -0.00551221, 0.008401652, -0.03163106, 0.028799035, 0.056887113, -0.0077031003, -0.018231003, 0.025548527, 0.026314413, 0.023383649, -0.035253566, 0.039875757, -0.024191905, -0.06552958, 0.015145615, 0.020154895, -0.066362776, 0.07953172, -0.07545048, -0.01798337, 0.027549917, 0.005233899, 0.06268486, -0.044923913, 0.015584899, 0.02147083, -0.053774126, -0.0069668186, 0.011331592, -0.0430505, -0.0032039108, -0.013643068, 0.0096913325, -0.039961092, 0.054184962, -0.008979204, -0.036204856, 0.0037574323, -0.016705016, 0.039916243, -0.016381636, -0.08687614, 0.027957242, 0.04948789, 0.031943448, -0.057290174, -0.042277932, -0.023002712, -0.047017496, 0.006684452, 0.054534316, -0.056737285, -0.07498496, -0.009375836, 0.025543522, 0.03028308, -0.06906246, 0.005863897, 0.03279533, 0.023197096, 0.0640316, -0.010762583, -0.03148228, 0.0031338094, -0.0072938614, -0.06358541, -0.005270622, -0.008926155, 0.021963716, -0.05552044, 0.024500206, -0.0036044843, 0.016203098, -0.0019299133, -0.03012397, -0.011156799, 0.06323655, 0.03971083, -0.0037787058, 0.062443055, -0.0064758747, 0.027825642, -0.0058271047, 0.10660979, 0.0768696, -0.005721021, 0.0006469746, -0.0060702893, -0.0037615518, 0.024443692, 0.019890888, 0.0004614053, -0.055237398, -0.061259262, -0.013920842, 0.032681175, 0.013193363, 0.008091507, -0.05888119, 0.028916609, -0.024801744, 0.014784777, 0.043455012, 0.042146776, -0.053490814, -0.026390158, -0.012684587, -0.062528014, 0.0007469724, 0.009444067, 0.055342283, 0.004789, -0.009570944, 0.0647348, -0.05427646, -0.030443273, 0.004453014, -0.0065536685, 0.043011244, 0.007335343, 0.01579795, -0.015037961, -0.062222652, 0.083001934, -0.0071070213, -0.017438611, -0.023761323, 0.039175898, 0.013001254, -0.021472273, -0.03829355, 0.040560693, 0.03135187, -0.03742055, -0.0017571095, -0.031136084, 0.03912493, -0.023099659, -0.042291485, -0.06915903, 0.04400628, 0.06700761, -0.011770504, -0.043494806, 0.04672133, 0.05778405, -0.018912366, -0.022868197, 0.060825825, 0.016874006, 0.0073900563, -0.010002537, 0.021573996, 0.005962376, 0.0491491, 0.03449636, -0.021416446, -0.0072996067, -0.027963754, -0.02216488, -0.0016100897, 0.018953698, -0.01317025, -0.031108452, -0.07793239, -0.040982008, -0.0043924483, -0.020185677, 0.024924824, -0.041641675, -0.026849264, -0.015949076, -0.012861395, 0.017245725, 0.025614774, -0.049223013, -0.036123235, 1.6120146e-06, 0.07790485, 0.019067246, 0.0075618587, 0.04324853, 0.014127279, 0.013150057, 0.0051650223, -0.0032270255, 0.03348731, -0.014980418, 0.0034561425, -0.030796885, -0.009452268, -0.0145541215, 0.049650297, 0.009352835, 0.013921525, -0.006638107, -1.4916843e-05, -0.031857543, 0.048845977, 0.0021973464, -0.0017968399, 0.02209603, 0.02006871, -0.031193376, 0.020376863, 0.014560888, -0.07205752, 0.03282666, 0.0031717056, -0.03392489, 0.025016325, -0.10766173, -0.011725264, -0.07139651, 0.021297976, -0.03277813, -0.027867323, -0.028798854, 0.008917343, 0.07009347, -0.041110456, 0.042566214, -0.054028656, -0.011037139, -0.026996415, -0.07548647, 0.013021667, -0.011179112, -0.003935323, -0.027333036, -0.013578021, 0.064508006, -0.0028996565, -0.06760958, 0.026824463, 0.034613468, -0.012324174, 0.0002846172, -0.04743452, -0.029777672, -0.01504816, -0.0115172, 0.031418037, -0.03131142, 0.046704125, 0.066929944, 0.015085166, 0.0032888376, -0.021353824, -0.042654254, -0.034337036, -0.0053100474, -0.022187805, 0.0035262338, -0.031869933, -0.04224167, -0.011481201, 0.05600788, -0.036872935, -0.00388018, -0.007399795, 0.028899776, 0.021440739, -0.042942062, 0.0030954145, 0.043310046, 0.05675842, -0.06413164, 0.02868405, 0.052379712, -0.010950414, -0.0380795, 0.019054776, -0.04667921, 0.0032908218, 0.027224576, 0.051181495, 0.0003472255, -0.036479842, 0.0024089655, 0.0021863838, -0.038180567, 0.020836549, -0.03288323, -0.03984082, 0.010270869, 0.028481523, -0.1216333, 0.036443643, 0.047073785, -0.021171005, -0.019994492, -0.030081859, 0.040892594, -0.019698361, -0.0036367078, 0.009343664, -0.022612732, 0.032733306, 0.03982301, 0.020052863, -0.00945905, 0.020473236, 0.0006271707, 0.058954712, 0.04027679, 0.005659914, 0.0066413516, 0.009159549, -0.05970646, 0.018969906, -0.025617097, -0.026128853, 0.028940285, 0.020558901, -0.040809028, 0.054443367, -0.004874267, -0.015153521, -0.00024793134, 0.016840119, 0.040159546, 0.002155261, -0.0138193015, 0.02345569, 0.002177301, 0.106234066, 0.01276331, -0.085579954, -0.012877629, 0.046544965, 0.020417461, -0.030211953, 0.035001833, 0.0077106813, 0.01900397, 0.02703751, -0.053472187, -0.019086493, 0.00428958, -0.0069794697, -0.017369961, 0.030781267, 0.03551536, 0.0048415153, 0.008016774, 0.042204764, 0.01922613, 0.04775945, 0.007525864, 0.04958513, -0.016124144, -0.05221883, 0.040309303, -0.017692946, -0.006757297, 0.0021398389, -0.008799435, 0.030151503, -0.023093767, -0.023980128, -0.024815168, 0.040575135, -0.028407246, 0.06408012, -0.049343437, 0.004522241, 0.01135044, -0.0047875787, -0.0014327575, 0.002449477, 0.006380749, 0.012606505, -0.017175775, 0.013629724, -0.014124491, -0.0178965, -0.037766375, 0.0043482524, 0.022445064, -0.040581662, -0.07602456, 0.017128633, -0.030821191, 0.010021304, -0.006262188, 0.037981182, -0.018636422, -0.029575236, -0.06029288, 0.05234343, 0.031536553, 0.035213273, 0.0463015, 0.0036708014, 0.0052345223, -0.050606936, 0.008256714, 0.02625674, -0.009607635, -0.0486939, 0.001669477, -0.071560495, 0.007041467, 0.07489814, -0.035134487, -0.044674326, 0.05438347, 0.013408014, -0.08244932, -0.06348855, -0.039674517, -0.026404835, -0.014855903, 0.005471334, -0.02302797, 0.007746313, -0.024981523, -0.046705868, 0.015537092, 0.017301518, 0.013637719, -0.05366216, -0.040013168, -0.018202893, -0.021289667, 0.007867972, -0.014348681, -0.054169655, -0.048515085, -0.004302536, 0.023561344, -0.05479715, 0.028102312, 0.071422175, -0.058051806, 0.0022482222, 0.01792397, -0.022148492, 0.026408166, -0.024048848, 0.059825547, 0.002632954, -0.0495286, 0.0022784234, 0.038764212, 0.00040144072, 0.030310614, 0.057940416, -0.01508035, -0.055378407, -0.051107764, 0.0038468342, -0.003155755, -0.026685834, 0.053139184, 0.022516226, 0.008175126, 0.016566997, 0.007076917, 0.014594105, 0.031596467, -0.014664266, -0.014177987, 0.0023916138, 0.0011586244, -0.038934156, 0.0031808876, -0.017630463, 0.0031040858, 0.015885863, 0.01965553, 0.02711403, -0.012510712, -0.049734417, 0.043539256, 0.019309346, -0.0727483, 0.00092066504, 0.08422341, -0.036712494, 0.060770884, 0.045213927, -0.0071196854, 0.022853747, -0.08573728, -0.005934812, 0.036175787, -0.03282357, 0.0365851, -0.004212834, -0.04486637, 0.092557974, -0.013356924, -0.06595603, -0.0150398305, -0.025142767, 0.043250445, -0.021360701, 0.049494747, -0.05258313, -0.057783876, -0.058879178, 0.02602606, 0.014588093, 0.08601702, 0.007908378, -0.027793288, 0.013667886, -0.040338863, -0.016787011, -0.030427827, 0.009063525, 0.028942192, 0.025336813, -0.007511073, 0.045527868, -0.02742367, -0.024122508, -0.02945458, 0.022295559, 0.028236434, -0.02587762, 0.014016392, 0.044975262, 0.02490689, 0.008495326, 0.005227856, 0.017179709, 0.0007806002]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def extract_column_titles(df):\n",
        "    \"\"\"\n",
        "    Extracts column titles from a Pandas DataFrame and returns them as a list.\n",
        "    \"\"\"\n",
        "    return list(df.columns)\n",
        "\n",
        "# Extract and print column titles for each DataFrame\n",
        "items_cols = extract_column_titles(items)\n",
        "\n",
        "print(\"\\nItems DataFrame Columns:\")\n",
        "items_cols"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vzkaf6CeUIfr",
        "outputId": "dbb5e401-16ee-4867-abe6-ef828ae9cf71"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Items DataFrame Columns:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Title',\n",
              " 'Author',\n",
              " 'ISBN Valid',\n",
              " 'Publisher',\n",
              " 'Subjects',\n",
              " 'book_id',\n",
              " 'ISBN',\n",
              " 'google_api_title',\n",
              " 'author_clean',\n",
              " 'embedded_title']"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5GeQ_ys3CeJa"
      },
      "source": [
        "\n",
        "#### Step 2: Check the Number of interactions, users and movies"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LHDaQs3tCeJb",
        "outputId": "d323b008-09e3-44ad-b206-ae3d88ff9b88"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of users = 7838, \n",
            " Number of books = 15291 \n",
            " Number of interactions = 87047\n"
          ]
        }
      ],
      "source": [
        "n_users = interactions.user_id.nunique()\n",
        "n_items = items.book_id.nunique()\n",
        "print(f'Number of users = {n_users}, \\n Number of books = {n_items} \\n Number of interactions = {len(interactions)}')\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n_items = items.book_id.nunique()\n",
        "print(f'Number of books = {n_items}')"
      ],
      "metadata": {
        "id": "J-RX3iodzW4n",
        "outputId": "c0507ac4-9c3d-4592-f7fd-efe12c2c7ee0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of books = 15291\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mQ02IWmrCeJb"
      },
      "source": [
        "\n",
        "#### Step 3: Split the Data into Training and Test Sets"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 362
        },
        "id": "gd32QvvuZWac",
        "outputId": "19b7a251-129f-48ab-d6b4-df619b0bee68"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       user_id  book_id     timestamp\n",
              "21035        0        0  1.680191e+09\n",
              "28842        0        1  1.680783e+09\n",
              "3958         0        2  1.680801e+09\n",
              "29592        0        3  1.683715e+09\n",
              "6371         0        3  1.683715e+09\n",
              "41220        0        4  1.686569e+09\n",
              "12217        0        5  1.687014e+09\n",
              "19703        0        6  1.687014e+09\n",
              "64522        0        7  1.687014e+09\n",
              "29380        0        8  1.687260e+09"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8ff31992-86f2-4344-b872-7124613b3892\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>book_id</th>\n",
              "      <th>timestamp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>21035</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.680191e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28842</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.680783e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3958</th>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1.680801e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29592</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.683715e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6371</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.683715e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41220</th>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>1.686569e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12217</th>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>1.687014e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19703</th>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>1.687014e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>64522</th>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>1.687014e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29380</th>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>1.687260e+09</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8ff31992-86f2-4344-b872-7124613b3892')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8ff31992-86f2-4344-b872-7124613b3892 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8ff31992-86f2-4344-b872-7124613b3892');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-15b59ca2-e9b2-40da-9610-350cdca1e17a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-15b59ca2-e9b2-40da-9610-350cdca1e17a')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-15b59ca2-e9b2-40da-9610-350cdca1e17a button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "interactions",
              "summary": "{\n  \"name\": \"interactions\",\n  \"rows\": 87047,\n  \"fields\": [\n    {\n      \"column\": \"user_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2266,\n        \"min\": 0,\n        \"max\": 7837,\n        \"num_unique_values\": 7838,\n        \"samples\": [\n          2226,\n          2177,\n          4236\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"book_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4441,\n        \"min\": 0,\n        \"max\": 15290,\n        \"num_unique_values\": 15109,\n        \"samples\": [\n          12344,\n          4093,\n          2388\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"timestamp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14198285.151551325,\n        \"min\": 1672663643.0,\n        \"max\": 1728925054.0,\n        \"num_unique_values\": 86768,\n        \"samples\": [\n          1699375376.0,\n          1718029733.0,\n          1711876194.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "# let's first sort the interactions by user and time stamp\n",
        "interactions = interactions.sort_values([\"user_id\", \"timestamp\"])\n",
        "interactions.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 362
        },
        "id": "_nG-g8CoZuFM",
        "outputId": "29e141ef-32bf-4d31-888d-14b6e3fea76e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   user_id  book_id     timestamp  pct_rank\n",
              "0        0        0  1.680191e+09      0.04\n",
              "1        0        1  1.680783e+09      0.08\n",
              "2        0        2  1.680801e+09      0.12\n",
              "3        0        3  1.683715e+09      0.16\n",
              "4        0        3  1.683715e+09      0.20\n",
              "5        0        4  1.686569e+09      0.24\n",
              "6        0        5  1.687014e+09      0.28\n",
              "7        0        6  1.687014e+09      0.32\n",
              "8        0        7  1.687014e+09      0.36\n",
              "9        0        8  1.687260e+09      0.40"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6f5aab1c-e423-400f-babf-ffde92aaa90b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>book_id</th>\n",
              "      <th>timestamp</th>\n",
              "      <th>pct_rank</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.680191e+09</td>\n",
              "      <td>0.04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.680783e+09</td>\n",
              "      <td>0.08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1.680801e+09</td>\n",
              "      <td>0.12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.683715e+09</td>\n",
              "      <td>0.16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.683715e+09</td>\n",
              "      <td>0.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>1.686569e+09</td>\n",
              "      <td>0.24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>1.687014e+09</td>\n",
              "      <td>0.28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>1.687014e+09</td>\n",
              "      <td>0.32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>1.687014e+09</td>\n",
              "      <td>0.36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>1.687260e+09</td>\n",
              "      <td>0.40</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6f5aab1c-e423-400f-babf-ffde92aaa90b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6f5aab1c-e423-400f-babf-ffde92aaa90b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6f5aab1c-e423-400f-babf-ffde92aaa90b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-d85d5b8b-77db-4a76-9654-bef6931412af\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d85d5b8b-77db-4a76-9654-bef6931412af')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-d85d5b8b-77db-4a76-9654-bef6931412af button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "interactions",
              "summary": "{\n  \"name\": \"interactions\",\n  \"rows\": 87047,\n  \"fields\": [\n    {\n      \"column\": \"user_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2266,\n        \"min\": 0,\n        \"max\": 7837,\n        \"num_unique_values\": 7838,\n        \"samples\": [\n          2226,\n          2177,\n          4236\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"book_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4441,\n        \"min\": 0,\n        \"max\": 15290,\n        \"num_unique_values\": 15109,\n        \"samples\": [\n          12344,\n          4093,\n          2388\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"timestamp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14198285.151551325,\n        \"min\": 1672663643.0,\n        \"max\": 1728925054.0,\n        \"num_unique_values\": 86768,\n        \"samples\": [\n          1699375376.0,\n          1718029733.0,\n          1711876194.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pct_rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.29010488163455683,\n        \"min\": 0.0025974025974025974,\n        \"max\": 1.0,\n        \"num_unique_values\": 6116,\n        \"samples\": [\n          0.05042016806722689,\n          0.8811188811188811,\n          0.794392523364486\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "interactions[\"pct_rank\"] = interactions.groupby(\"user_id\")[\"timestamp\"].rank(pct=True, method='dense')\n",
        "interactions.reset_index(inplace=True, drop=True)\n",
        "interactions.head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8JaLSrKya5P6"
      },
      "source": [
        "Now all remains to do is to pick the first 80% of the interactions of each user in the training set and the rest in the test set. We can do so using the `pct_rank` column."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "keedrU6da4Kd"
      },
      "outputs": [],
      "source": [
        "train_data = interactions[interactions[\"pct_rank\"] < 0.8]\n",
        "test_data = interactions[interactions[\"pct_rank\"] >= 0.8]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P68b_ijzCeJb",
        "outputId": "cdb5b35d-a46b-4c5a-91a6-bbc0d65bf9b9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training set size: 65419\n",
            "Testing set size: 21628\n"
          ]
        }
      ],
      "source": [
        "print(\"Training set size:\", train_data.shape[0])\n",
        "print(\"Testing set size:\", test_data.shape[0])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0qX6z1MoCeJb"
      },
      "source": [
        "## Task 2: Creating User-Item Matrices for Implicit Feedback\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Nv7ZMDzNCeJc",
        "outputId": "7c74daf8-7d32-4af2-d041-334af3eef2f9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "number of users = 7838 | number of movies = 15291\n"
          ]
        }
      ],
      "source": [
        "print('number of users =', n_users, '| number of movies =', n_items)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G4WD0VpYCeJc"
      },
      "source": [
        "#### Step 1: Define the Function to Create the Data Matrix\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "3hk-nUZgCeJc"
      },
      "outputs": [],
      "source": [
        "# Define a function to create the data matrix\n",
        "def create_data_matrix(data, n_users, n_items):\n",
        "    \"\"\"\n",
        "    This function returns a numpy matrix with shape (n_users, n_items).\n",
        "    Each entry is a binary value indicating positive interaction.\n",
        "    \"\"\"\n",
        "    data_matrix = np.zeros((n_users, n_items))\n",
        "    data_matrix[data[\"user_id\"].values, data[\"book_id\"].values] = 1\n",
        "    return data_matrix"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EnvgOARgCeJc"
      },
      "source": [
        "#### Step 2: Create the Training and Testing Matrices\n",
        "\n",
        "Now we can use the function to create matrices for both the training and testing data. Each cell in the matrix will show a 1 if there was a positive interaction in the training or testing data, and a 0 otherwise."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hFQ62rQWCeJc",
        "outputId": "f750b8b5-c04c-47f1-e567-39e74d54e939"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "train_data_matrix\n",
            "[[1. 1. 1. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]\n",
            " ...\n",
            " [0. 0. 0. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]]\n",
            "number of non-zero values:  49689.0\n",
            "test_data_matrix\n",
            "[[0. 0. 0. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]\n",
            " ...\n",
            " [0. 0. 0. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]]\n",
            "number of non-zero values:  19409.0\n"
          ]
        }
      ],
      "source": [
        "# Create the training and testing matrices\n",
        "train_data_matrix = create_data_matrix(train_data, n_users, n_items)\n",
        "test_data_matrix = create_data_matrix(test_data, n_users, n_items)\n",
        "\n",
        "# Display the matrices to understand their structure\n",
        "print('train_data_matrix')\n",
        "print(train_data_matrix)\n",
        "print(\"number of non-zero values: \", np.sum(train_data_matrix))\n",
        "print('test_data_matrix')\n",
        "print(test_data_matrix)\n",
        "print(\"number of non-zero values: \", np.sum(test_data_matrix))\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#give the dimensions of matrices\n",
        "\n",
        "print(\"Train data matrix dimensions:\", train_data_matrix.shape)\n",
        "print(\"Test data matrix dimensions:\", test_data_matrix.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9x2mjoA_tFG4",
        "outputId": "07f8aa50-d305-4dfd-fb5a-484be26a0aab"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train data matrix dimensions: (7838, 15291)\n",
            "Test data matrix dimensions: (7838, 15291)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##### Create the different predictions"
      ],
      "metadata": {
        "id": "twTAuI2X12uo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Basic Definitions"
      ],
      "metadata": {
        "id": "ZnQdJecyBBF1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Recommendation frame generation\n",
        "def create_recommendation_table(user_predictions, top_n=10, separator=\" \"):\n",
        "    \"\"\"\n",
        "    Creates a table of top-N recommendations for each user.\n",
        "\n",
        "    Args:\n",
        "        user_predictions (numpy.ndarray): Rows = users, columns = items. Predicted scores.\n",
        "        top_n (int): Number of top recommendations per user.\n",
        "        separator (str): Delimiter to join recommended book IDs.\n",
        "\n",
        "    Returns:\n",
        "        pandas.DataFrame: Columns = ['user_id', 'recommendation'].\n",
        "    \"\"\"\n",
        "    recommendations = []\n",
        "    num_users = user_predictions.shape[0]\n",
        "\n",
        "    for user_id in range(num_users):\n",
        "        top_items = np.argsort(user_predictions[user_id, :])[-top_n:][::-1]\n",
        "        recommendations.append({\n",
        "            'user_id': user_id,\n",
        "            'recommendation': separator.join(map(str, top_items))\n",
        "        })\n",
        "\n",
        "    return pd.DataFrame(recommendations)"
      ],
      "metadata": {
        "id": "_p3MnNG_BALq"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Def for the precision_recall_at_k function\n",
        "def precision_recall_at_k(prediction, ground_truth, k=10):\n",
        "    \"\"\"\n",
        "    Calculates Precision@K and Recall@K for top-K recommendations.\n",
        "    Parameters:\n",
        "        prediction (numpy array): The predicted interaction matrix with scores.\n",
        "        ground_truth (numpy array): The ground truth interaction matrix (binary).\n",
        "        k (int): Number of top recommendations to consider.\n",
        "    Returns:\n",
        "        precision_at_k (float): The average precision@K over all users.\n",
        "        recall_at_k (float): The average recall@K over all users.\n",
        "    \"\"\"\n",
        "    num_users = prediction.shape[0]\n",
        "    precision_at_k, recall_at_k = 0, 0\n",
        "\n",
        "    for user in range(num_users):\n",
        "        # TODO: Get the indices of the top-K items for the user based on predicted scores\n",
        "        top_k_items = np.argsort(prediction[user, :])[-k:]\n",
        "\n",
        "        # TODO: Calculate the number of relevant items in the top-K items for the user\n",
        "        relevant_items_in_top_k = np.isin(top_k_items, np.where(ground_truth[user, :] == 1)[0]).sum()\n",
        "\n",
        "        # TODO: Calculate the total number of relevant items for the user\n",
        "        total_relevant_items = ground_truth[user, :].sum()\n",
        "\n",
        "        # Precision@K and Recall@K for this user\n",
        "        precision_at_k += relevant_items_in_top_k / k\n",
        "        recall_at_k += relevant_items_in_top_k / total_relevant_items if total_relevant_items > 0 else 0\n",
        "\n",
        "    # Average Precision@K and Recall@K over all users\n",
        "    precision_at_k /= num_users\n",
        "    recall_at_k /= num_users\n",
        "\n",
        "    return precision_at_k, recall_at_k"
      ],
      "metadata": {
        "id": "T2DnLzkMVUTQ"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create random splits def.\n",
        "def random_split_per_user(interactions_df, test_size=0.2, seed=None):\n",
        "    train_list = []\n",
        "    test_list = []\n",
        "    for user_id, user_df in interactions_df.groupby('user_id'):\n",
        "        train_df, test_df = train_test_split(user_df, test_size=test_size, random_state=seed)\n",
        "        train_list.append(train_df)\n",
        "        test_list.append(test_df)\n",
        "    return pd.concat(train_list), pd.concat(test_list)"
      ],
      "metadata": {
        "id": "maCLw9AGXJ3Y"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the function to predict interactions based on item similarity\n",
        "def item_based_predict(interactions, similarity, epsilon=1e-9):\n",
        "    \"\"\"\n",
        "    Predicts user-item interactions based on item-item similarity.\n",
        "    Parameters:\n",
        "        interactions (numpy array): The user-item interaction matrix.\n",
        "        similarity (numpy array): The item-item similarity matrix.\n",
        "        epsilon (float): Small constant added to the denominator to avoid division by zero.\n",
        "    Returns:\n",
        "        numpy array: The predicted interaction scores for each user-item pair.\n",
        "    \"\"\"\n",
        "    # np.dot does the matrix multiplication. Here we are calculating the\n",
        "    # weighted sum of interactions based on item similarity\n",
        "    pred = similarity.dot(interactions.T) / (similarity.sum(axis=1)[:, np.newaxis] + epsilon)\n",
        "    return pred.T  # Transpose to get users as rows and items as columns"
      ],
      "metadata": {
        "id": "J4k9GVBDjupC"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### TF-IDF\n",
        "w. ['Publisher', 'Subjects', 'google_api_title', 'author_clean', 'ISBN']<br>\n",
        "Mean Precision@10 = 0.0149 <br>\n",
        "Mean Recall@10    = 0.091\n",
        "\n",
        "w."
      ],
      "metadata": {
        "id": "6lhSv9r6IZtE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#TF-IDF\n",
        "\n",
        "# STEP 1: Build and clean the combined text feature\n",
        "text_fields = ['Publisher', 'Subjects', 'google_api_title', 'author_clean', 'ISBN']\n",
        "items['combined_text'] = items[text_fields].fillna('').agg(' '.join, axis=1)\n",
        "\n",
        "# STEP 2: Align items with those used in the train_data_matrix (e.g., by book_id)\n",
        "# to ensure the order of books in the TF-IDF matrix exactly matches the item columns in the collaborative filtering matrix, so similarity scores align correctly with item IDs.\n",
        "items_ordered = items.set_index('book_id').loc[range(train_data_matrix.shape[1])]\n",
        "\n",
        "# STEP 3: Compute TF-IDF matrix and cosine similarity\n",
        "tfidf = TfidfVectorizer(stop_words='english', max_features=1000)\n",
        "tfidf_matrix = tfidf.fit_transform(items_ordered['combined_text'])\n",
        "\n",
        "# Cosine similarity between item vectors\n",
        "tfidf_sim = cosine_similarity(tfidf_matrix)\n",
        "\n",
        "# Normalize similarity matrix (optional for numerical stability or hybrid weighting)\n",
        "tfidf_sim = normalize(tfidf_sim)\n"
      ],
      "metadata": {
        "id": "WkUW6J2bDWzR"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "261c11cf-741d-4eef-9e14-9c6fc06ecef3",
        "id": "Qyaqca9iGrQg"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted Interaction Matrix:\n",
            "[[5.23488944e-03 4.82388634e-03 2.74275719e-03 ... 0.00000000e+00\n",
            "  1.11745919e-03 9.01266134e-04]\n",
            " [0.00000000e+00 2.15339098e-04 9.08230503e-04 ... 0.00000000e+00\n",
            "  2.15444597e-03 3.51545151e-04]\n",
            " [3.09071426e-03 1.27620157e-03 2.24370357e-03 ... 3.00673094e-02\n",
            "  3.63741569e-02 1.59236900e-03]\n",
            " ...\n",
            " [0.00000000e+00 0.00000000e+00 0.00000000e+00 ... 5.04838085e-03\n",
            "  1.71039333e-03 0.00000000e+00]\n",
            " [0.00000000e+00 2.56354946e-05 6.77503986e-05 ... 3.97796592e-03\n",
            "  2.01688041e-03 5.05305780e-05]\n",
            " [0.00000000e+00 9.08243283e-05 1.15114916e-04 ... 0.00000000e+00\n",
            "  9.47675360e-04 2.32244342e-04]]\n",
            "(7838, 15291)\n"
          ]
        }
      ],
      "source": [
        "# Calculate the item-based predictions for positive interactions\n",
        "item_tfidf_prediction = item_based_predict(train_data_matrix, tfidf_sim)\n",
        "print(\"Predicted Interaction Matrix:\")\n",
        "print(item_tfidf_prediction)\n",
        "print(item_tfidf_prediction.shape)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create df\n",
        "item_tfidf_recommendations_df = create_recommendation_table(item_tfidf_prediction, top_n=10, separator=\" \")\n",
        "\n",
        "# Save and display\n",
        "item_tfidf_recommendations_df.to_csv('item_tfidf_recommendations.csv', index=False)\n",
        "\n",
        "print(\"\\nItem-based Recommendations:\")\n",
        "display(item_tfidf_recommendations_df)"
      ],
      "metadata": {
        "outputId": "c5bf74de-70c0-4dae-c77a-8bd7e4ed590a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "2Buenjv5H62A"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Item-based Recommendations:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "      user_id                                     recommendation\n",
              "0           0  15060 2395 16 4512 13261 19 13048 11659 2096 1...\n",
              "1           1  8656 13478 10787 14409 11482 13477 8913 820 95...\n",
              "2           2  9154 14851 9097 3511 15226 5508 11444 11185 44...\n",
              "3           3  4471 10806 123 3837 5220 9701 3834 14997 2963 ...\n",
              "4           4  14274 467 14099 7698 4284 500 8567 7603 2415 1...\n",
              "...       ...                                                ...\n",
              "7833     7833  2750 6107 2121 14232 431 14142 14525 975 12105...\n",
              "7834     7834  7311 12753 12387 8241 10596 13952 14826 1675 8...\n",
              "7835     7835  7429 10297 11482 9442 1830 6911 1032 14898 130...\n",
              "7836     7836  5702 10308 11905 7399 101 2031 10651 14876 111...\n",
              "7837     7837  14636 15069 7309 3253 9474 14232 8067 696 1065...\n",
              "\n",
              "[7838 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ff296d14-a6b6-4cb5-aa4d-aaf1e52352df\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>recommendation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>15060 2395 16 4512 13261 19 13048 11659 2096 1...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>8656 13478 10787 14409 11482 13477 8913 820 95...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>9154 14851 9097 3511 15226 5508 11444 11185 44...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>4471 10806 123 3837 5220 9701 3834 14997 2963 ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>14274 467 14099 7698 4284 500 8567 7603 2415 1...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7833</th>\n",
              "      <td>7833</td>\n",
              "      <td>2750 6107 2121 14232 431 14142 14525 975 12105...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7834</th>\n",
              "      <td>7834</td>\n",
              "      <td>7311 12753 12387 8241 10596 13952 14826 1675 8...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7835</th>\n",
              "      <td>7835</td>\n",
              "      <td>7429 10297 11482 9442 1830 6911 1032 14898 130...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7836</th>\n",
              "      <td>7836</td>\n",
              "      <td>5702 10308 11905 7399 101 2031 10651 14876 111...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7837</th>\n",
              "      <td>7837</td>\n",
              "      <td>14636 15069 7309 3253 9474 14232 8067 696 1065...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7838 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ff296d14-a6b6-4cb5-aa4d-aaf1e52352df')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ff296d14-a6b6-4cb5-aa4d-aaf1e52352df button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ff296d14-a6b6-4cb5-aa4d-aaf1e52352df');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-82b02421-02d7-4fae-b175-e8330267b4cf\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-82b02421-02d7-4fae-b175-e8330267b4cf')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-82b02421-02d7-4fae-b175-e8330267b4cf button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_adc14f43-a61f-41a9-946e-10f85a18b001\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('item_tfidf_recommendations_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_adc14f43-a61f-41a9-946e-10f85a18b001 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('item_tfidf_recommendations_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "item_tfidf_recommendations_df",
              "summary": "{\n  \"name\": \"item_tfidf_recommendations_df\",\n  \"rows\": 7838,\n  \"fields\": [\n    {\n      \"column\": \"user_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2262,\n        \"min\": 0,\n        \"max\": 7837,\n        \"num_unique_values\": 7838,\n        \"samples\": [\n          2226,\n          2177,\n          4236\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"recommendation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7458,\n        \"samples\": [\n          \"3054 3935 10417 9730 1512 6469 2171 210 1254 6017\",\n          \"6125 4441 7717 14285 13403 9597 11260 11868 3306 9446\",\n          \"7823 13239 13495 7435 6045 9169 7680 13570 2562 9701\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cross-validation setup\n",
        "seeds = list(range(5))  # 5 random seeds for 5 train-test splits\n",
        "\n",
        "# Evaluate precision and recall for one run\n",
        "def evaluate_one(seed):\n",
        "    train_df, test_df = random_split_per_user(interactions, seed=seed)\n",
        "    train_matrix = create_data_matrix(train_df, n_users, n_items)\n",
        "    prediction_matrix = item_based_predict(train_matrix, tfidf_sim)\n",
        "    test_matrix = create_data_matrix(test_df, n_users, n_items)\n",
        "    p_at_k, r_at_k = precision_recall_at_k(prediction_matrix, test_matrix, k=10)\n",
        "    return p_at_k, r_at_k\n",
        "\n",
        "# Run evaluations in parallel\n",
        "results = Parallel(n_jobs=-1)(\n",
        "    delayed(evaluate_one)(seed) for seed in seeds\n",
        ")\n",
        "\n",
        "# Extract and average\n",
        "precisions, recalls = zip(*results)\n",
        "mean_precision = np.mean(precisions)\n",
        "mean_recall = np.mean(recalls)\n",
        "\n",
        "# Print results\n",
        "print(f\"Mean Precision@10 = {mean_precision:.4f}\")\n",
        "print(f\"Mean Recall@10    = {mean_recall:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JbO05ao_W-Ec",
        "outputId": "68635367-dae8-4101-8407-68587faee1ec"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Precision@10 = 0.0149\n",
            "Mean Recall@10    = 0.0915\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Google API similarity"
      ],
      "metadata": {
        "id": "m5XWMbRDIkno"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import ast\n",
        "\n",
        "# Safely convert strings to arrays (if needed)\n",
        "items['embedded_title'] = items['embedded_title'].apply(lambda x: np.array(ast.literal_eval(x)) if isinstance(x, str) else x)\n",
        "\n",
        "# Drop rows with missing or malformed embeddings\n",
        "valid_items = items[items['embedded_title'].apply(lambda x: isinstance(x, np.ndarray) and x.ndim == 1)].reset_index(drop=True)\n",
        "\n",
        "# Combine (only one embedding column here, so just stack directly)\n",
        "combined_embeddings = np.stack(valid_items['embedded_title'].values)\n",
        "\n",
        "# Compute similarity\n",
        "embedding_sim = cosine_similarity(combined_embeddings)\n",
        "embedding_sim = normalize(embedding_sim)\n"
      ],
      "metadata": {
        "id": "cpKcTrYvIwp4"
      },
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate the item-based predictions for positive interactions\n",
        "item_prediction = item_based_predict(train_data_matrix, embedding_sim)\n",
        "print(\"Predicted Interaction Matrix:\")\n",
        "print(item_prediction)\n",
        "print(item_prediction.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vfINATD0phDQ",
        "outputId": "ba6e4c47-c12f-400a-86b4-1b6aeefdc96b"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted Interaction Matrix:\n",
            "[[0.00131023 0.00137256 0.00129105 ... 0.00123734 0.00123457 0.00134539]\n",
            " [0.00058804 0.00057863 0.00058677 ... 0.00060747 0.00060864 0.00058611]\n",
            " [0.00266846 0.00262607 0.00262899 ... 0.00286954 0.0028683  0.00265177]\n",
            " ...\n",
            " [0.0001236  0.00011433 0.00012322 ... 0.00013375 0.00014627 0.00011329]\n",
            " [0.00011613 0.00011021 0.00011533 ... 0.0001368  0.00013985 0.00010954]\n",
            " [0.00011888 0.00011838 0.00012043 ... 0.00013402 0.00013495 0.00012445]]\n",
            "(7838, 15291)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "p_at_k, r_at_k = precision_recall_at_k(item_prediction, test_data_matrix, k=10)\n",
        "print(f\"Precision@10 = {p_at_k:.4f}\")\n",
        "print(f\"Recall@10 = {r_at_k:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ElxtSDUVpue_",
        "outputId": "ccb7e77b-98f0-43da-9e69-eef932fa99cb"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Precision@10 = 0.0431\n",
            "Recall@10 = 0.2454\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Cross Validation\n",
        "def evaluate_one(seed):\n",
        "    train_df, test_df = random_split_per_user(interactions, seed=seed)\n",
        "    train_matrix = create_data_matrix(train_df, n_users, n_items)\n",
        "\n",
        "    # Compute similarity from current train split\n",
        "    item_sim = cosine_similarity(train_matrix.T)\n",
        "    prediction_matrix = item_based_predict(train_matrix, item_sim)\n",
        "\n",
        "    # Evaluate on corresponding test set\n",
        "    test_matrix = create_data_matrix(test_df, n_users, n_items)\n",
        "    p_at_k, r_at_k = precision_recall_at_k(prediction_matrix, test_matrix, k=10)\n",
        "\n",
        "    return p_at_k, r_at_k\n",
        "\n",
        "# Run cross-validation\n",
        "seeds = list(range(5))\n",
        "results = Parallel(n_jobs=-1)(\n",
        "    delayed(evaluate_one)(seed) for seed in seeds\n",
        ")\n",
        "\n",
        "# Unpack and average\n",
        "precisions, recalls = zip(*results)\n",
        "mean_precision = np.mean(precisions)\n",
        "mean_recall = np.mean(recalls)\n",
        "\n",
        "# Print results\n",
        "print(f\"Mean Precision@10 = {mean_precision:.4f}\")\n",
        "print(f\"Mean Recall@10    = {mean_recall:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lfSK7wIYp8Ja",
        "outputId": "219391d5-82b8-48aa-bd5d-29b4adab3c2f"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Precision@10 = 0.0585\n",
            "Mean Recall@10    = 0.2823\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### BERT Similarity\n",
        "Mean Precision@10 = 0.0272 <br>\n",
        "Mean Recall@10    = 0.1760"
      ],
      "metadata": {
        "id": "s421o1vwIpQL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# STEP 1: Combine text features\n",
        "text_fields = ['Publisher', 'Subjects', 'google_api_title', 'author_clean', 'ISBN' ]\n",
        "items['combined_text'] = items[text_fields].fillna('').agg(' '.join, axis=1)\n",
        "\n",
        "# STEP 2: Align with train_data_matrix\n",
        "items_ordered = items.set_index('book_id').loc[range(train_data_matrix.shape[1])]\n",
        "\n",
        "# STEP 3: Load BERT model\n",
        "model = SentenceTransformer('all-MiniLM-L6-v2')\n",
        "\n",
        "# STEP 4: Encode book texts into embeddings\n",
        "bert_embeddings = model.encode(items_ordered['combined_text'].tolist(), show_progress_bar=True)\n",
        "\n",
        "# STEP 5: Compute cosine similarity\n",
        "bert_sim = cosine_similarity(bert_embeddings)\n",
        "\n",
        "# STEP 6: Normalize (optional)\n",
        "bert_sim = normalize(bert_sim)"
      ],
      "metadata": {
        "id": "BKuhs4IUIjeT",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 560,
          "referenced_widgets": [
            "fe20c3a2c25a4e1c885dd27f5ded2d52",
            "64e77f6f73654c95ae074b8fef5b9388",
            "276a609f8da24c02abb034f451076108",
            "6ae60a46a48b4b50bac7758f75509781",
            "39199447777a4558be8c596e02c11cb5",
            "209118f3aaba48d69d17132cc7145897",
            "4ddea6c211fa489bb4e78237370b9bea",
            "504e8aa45c0748f5bdd200869a57f309",
            "ccd6e37f8efb48e39df6ecad5b3fa5f8",
            "6b9b849c0ea94ca7a9b15e3813554cb5",
            "b5a0ec6b12ab49f384967c6ee3c2a41b",
            "1266bf4b8a7840a4bb4fc3f2dda139e9",
            "cd9a0e1e93944b88b45831042751cf6a",
            "1373adfe677d42d0b5aed6a1799e32d8",
            "bbd3ee982b52435db57a9c41263f296c",
            "a2a02e2df85644c6ac53ac8172440a7a",
            "652c0a900ecf4fa4997c56470a67683b",
            "b86f6abc67e044758be51b2fa50f6419",
            "8dd03b6008634c67b52f936ffb627aad",
            "36abd9e15dd24d6d905f1bdc599c46cb",
            "8f05e0ccb94d46a5bfc5ece8eba79117",
            "cb427c338bbc43ddbe00aa9fa73dd3a5",
            "1f7fb2e3d80642a38af086fd7b1b1d02",
            "1237210347264c52ad30bc1334426ffa",
            "68c74abbcff147b9b1aad9a4dcccf5e6",
            "5d0705fe801c47c6b1559217e9c20dbd",
            "0d94cf03c2394be8a797744faf449391",
            "26889e94b7d94d6a90b4a075c561f53e",
            "7780a25cd7484b9fa123f143446e1700",
            "d2c36da599fe43c491a6ae1aed6c5dee",
            "a8d63017bd4644febd6ad069a3f55499",
            "19aa06a2db564f0dbb88fe35d6a380ab",
            "69b7698c9dfe4b62a2169ebd927addf5",
            "c72acc127a194bfe84bba209dd957856",
            "a2f4c2d4ac1a4933a0cc2ebc8f9d9183",
            "bae33bcece0d484bb9286f686536c979",
            "c1336e3d1505477b9c180eec1a75218d",
            "57d080d99ce3487ead29fff95347caad",
            "7cc9d251fcc241a688d9e0c594f5de27",
            "af1a54d8727c410789412de5c5f60af1",
            "022a0b5960f54d9a865bb9b71443c5d4",
            "ed08558f241f419f9cdd7ba8ce79f64e",
            "6e49384dc0474bfdbde692f2c67af614",
            "c78cfdee965e453fbd140536bed07e1c",
            "da0d25993e6d407998a6b62e9a1dc0f3",
            "72f5b87d3f5f48d582be873f2361c6f7",
            "b63b6e6ba8784a048a17b4ca79ec24bd",
            "74f179cec7864a1f8847a59423085301",
            "0b1aa3fd61b744d0b2e64a0880873f44",
            "cd25e3d975784ab9ab51735c09cf54e5",
            "d744d093a82c4849a2bdce71accb0fce",
            "2fea236e815d462498844872891e08c1",
            "e937810645bd4b188375833922858e11",
            "131325f667fd4154ab7d105b6aa66af0",
            "6e6c8c05332f4d01bd2964859dfd4871",
            "5a29be9d139c4054ac3fa53161e52b2a",
            "c9e397da4e0a4e738d240be4380a76c7",
            "0f0ef937aa6a4dbdaf40f515c02116f4",
            "ef2f5d492d70434e81da67289bfeb177",
            "5e5b0fd7d31a41d0986e937106861011",
            "8c9d0c1eacaf4f7b8fafed99569f30be",
            "905409f9473b412c831ddafe70dc114f",
            "9c14f908bf9c40b5a63fb9554bce6a9b",
            "1fab3518154f422fab4564c70423cddd",
            "7b779d6b2e9649718bb15f2c4981f1f1",
            "5d4fdffcf8fe489f99fa9f4d79d0a511",
            "cf23a1ddf9dd4ad29b963a0e50004b03",
            "4b03e027849f4448a80c6681ba44fc2e",
            "44e5db6d25114227b59cf40c1c784f28",
            "5d929e06fd7844698cd437c25f1bd9a4",
            "89229a7de3814950a2ea5657eb970d3c",
            "d4d6d33a4d3f4838abf14a490e09945e",
            "ff28d732179b4fae8a0e4a295d8a22ee",
            "40d010c5439b48f6b9241af6d0ea1975",
            "6823e1ca4d724d2ba4d5879b226ba268",
            "22f287e8ffc44732869b3ad2aac20d9a",
            "8edf989e33b3465c9ad9d12496171d5b",
            "a2fee88616eb40cdb1e38ad2a6ecfe05",
            "b0191618b64448efa5a2996c78f202ec",
            "9c6b42880fff4dc59815d1a79e7b8590",
            "f029d77255bc4150890c310a09e9850f",
            "06b95dc2a3bf4c958bb6cf217785ad28",
            "c53de31fc5284319b7b268c052c9998f",
            "a2e45613215840b39a92573c401ffd58",
            "4178636e97b246b68c3adda1a2a023e8",
            "67656ea4ed8d4c53b699f75941fca5ab",
            "f78607ba6c8f4ce386cba84894eff748",
            "c8878202e93343a1b262a73534d71b52",
            "0e608bbcaa164fbc93480484d5cf540a",
            "3754621e07dc4641b867d1e061686b32",
            "316fc1b7d5ee4659a3ef37eeaa01fbed",
            "0ecceb6b71654e088481764c2fa4c324",
            "7d224fad0706454cb04c24bfac5e7309",
            "483e0ea5fe0949dd901bb7901e5f07c9",
            "081bc79dd6cb44dab81e4493fb99c97b",
            "fe09ed5972e547ddabdc7e59c4d73d62",
            "ae81d2a3011a4f15aee30276c59bf936",
            "8223b4e8f20f4088bf88a3dfa1e45d8f",
            "252923ca40db4e2ea77f083fb9350145",
            "5b2add03e5eb48a6b10d89826b1f3430",
            "abe24c5d787247ceadca04bdc6d21f82",
            "2e2a55bb22bc4abdb5ca5c6480ce8479",
            "fa816360cf7c44e2a0562e965585490e",
            "2566cbf46d3345559cc286a7d7788efa",
            "33126d7db6a146cab583af942e71eb1f",
            "cdeeff9ba4804236a76cb89fcd7b8ea3",
            "06c69f0a44e7407b81d79fa2c61b863c",
            "67e0ffe7035b41e4a1ae6aa7efeeb44e",
            "31826b970af44240816ec1d89eec484e",
            "0c14351f60244873ac9573006f05aaf7",
            "5a3709f049a84876a2845cacfbb6103c",
            "a6ba17303a0b44cb9e384b4dfc968bb0",
            "000b6fe605bc4e3fa983135bb4afdbd5",
            "1faad0cf787e41c5a8b05fa18974f414",
            "85544c09ed3e4a35827886c96404fc26",
            "fa7afd3b6e0a42339c5832029430c007",
            "079f4ea0abf74037b813c1df5d8e3c90",
            "13b1a3544c8c469ebabed3d3e6b9db92",
            "0d5a5ee963634dba8b2dff8a0d35f5cc",
            "15eb95a937354388a6138f1dadaef3ec",
            "497257ac052f44fbb7925f293014d370",
            "8b4f22e380b74c70b58452b114d19af4",
            "304e93ec82e84baea2865cbe20e7ea41",
            "a79ff83455dc4e24babd338efc3bbd9b",
            "ca53646bf1894dd8a215f8f3ec67ee24",
            "e82078311f804fe0a3791f929c403068",
            "906db674faa146d58692093a8fe35155",
            "b4864452ac684faaac834b1900120f2c",
            "feede89d84a1432eb6027caa40d1c7b1",
            "e06d5d98a6a74fe1889fb1f8c7e5193c",
            "88c170ea301647a59fb43efdbea080fd",
            "f806bdc45c7149a198db9cb27f9cb1e8"
          ]
        },
        "outputId": "0bea1ab7-deb2-43c2-d37b-8d53988d11b7"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n",
            "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
            "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
            "You will be able to reuse this secret in all of your notebooks.\n",
            "Please note that authentication is recommended but still optional to access public models or datasets.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "modules.json:   0%|          | 0.00/349 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "fe20c3a2c25a4e1c885dd27f5ded2d52"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config_sentence_transformers.json:   0%|          | 0.00/116 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "1266bf4b8a7840a4bb4fc3f2dda139e9"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "README.md:   0%|          | 0.00/10.5k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "1f7fb2e3d80642a38af086fd7b1b1d02"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "sentence_bert_config.json:   0%|          | 0.00/53.0 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "c72acc127a194bfe84bba209dd957856"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config.json:   0%|          | 0.00/612 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "da0d25993e6d407998a6b62e9a1dc0f3"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Xet Storage is enabled for this repo, but the 'hf_xet' package is not installed. Falling back to regular HTTP download. For better performance, install the package with: `pip install huggingface_hub[hf_xet]` or `pip install hf_xet`\n",
            "WARNING:huggingface_hub.file_download:Xet Storage is enabled for this repo, but the 'hf_xet' package is not installed. Falling back to regular HTTP download. For better performance, install the package with: `pip install huggingface_hub[hf_xet]` or `pip install hf_xet`\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "model.safetensors:   0%|          | 0.00/90.9M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "5a29be9d139c4054ac3fa53161e52b2a"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer_config.json:   0%|          | 0.00/350 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "cf23a1ddf9dd4ad29b963a0e50004b03"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "a2fee88616eb40cdb1e38ad2a6ecfe05"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "0e608bbcaa164fbc93480484d5cf540a"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "special_tokens_map.json:   0%|          | 0.00/112 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "5b2add03e5eb48a6b10d89826b1f3430"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config.json:   0%|          | 0.00/190 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "5a3709f049a84876a2845cacfbb6103c"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Batches:   0%|          | 0/478 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "8b4f22e380b74c70b58452b114d19af4"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 62,
      "metadata": {
        "id": "9NgkTkuVJ_hx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "104b7243-b354-4f91-efd8-38bd26915b93"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted Interaction Matrix:\n",
            "[[1.30618330e-03 1.50127802e-03 1.29150541e-03 ... 1.24221782e-03\n",
            "  1.10824964e-03 1.40356858e-03]\n",
            " [6.84342826e-04 5.97659609e-04 5.97134498e-04 ... 7.40592487e-04\n",
            "  7.46352492e-04 6.32520449e-04]\n",
            " [3.42793589e-03 2.77170762e-03 2.51432818e-03 ... 4.14568175e-03\n",
            "  5.22063599e-03 2.24722978e-03]\n",
            " ...\n",
            " [1.12241614e-04 8.39200351e-05 1.01956241e-04 ... 2.22811388e-04\n",
            "  2.08675473e-04 1.03299566e-04]\n",
            " [1.49944292e-04 1.14743188e-04 1.18600132e-04 ... 1.88148784e-04\n",
            "  2.59905235e-04 1.12042670e-04]\n",
            " [1.43906497e-04 1.28266673e-04 1.09585640e-04 ... 1.55347188e-04\n",
            "  2.00214252e-04 1.91515510e-04]]\n",
            "(7838, 15291)\n"
          ]
        }
      ],
      "source": [
        "# Calculate the item-based predictions for positive interactions\n",
        "item_bert_prediction = item_based_predict(train_data_matrix, bert_sim)\n",
        "print(\"Predicted Interaction Matrix:\")\n",
        "print(item_bert_prediction)\n",
        "print(item_bert_prediction.shape)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create recommendation\n",
        "item_bert_recommendations_df = create_recommendation_table(item_bert_prediction, top_n=10, separator=\" \")\n",
        "\n",
        "# Save and display\n",
        "item_bert_recommendations_df.to_csv('item_bert_recommendations.csv', index=False)\n",
        "\n",
        "print(\"\\nItem-based Recommendations:\")\n",
        "display(item_bert_recommendations_df)"
      ],
      "metadata": {
        "id": "jMGI3d66KMOf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "outputId": "80d32254-a091-49aa-d2bb-875595844f53"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Item-based Recommendations:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "      user_id                                     recommendation\n",
              "0           0  13010 14255 5254 13995 14284 9021 5326 1298 12...\n",
              "1           1   30 31 14553 13716 132 7431 15098 9819 8504 15174\n",
              "2           2  11379 15066 14850 3057 2142 13952 14049 14552 ...\n",
              "3           3  13010 151 155 8504 11379 12109 11561 2185 5754...\n",
              "4           4  15205 12672 13010 1807 10401 6925 3168 6746 10...\n",
              "...       ...                                                ...\n",
              "7833     7833  10588 12632 975 2047 9238 9408 7322 400 14445 ...\n",
              "7834     7834  13009 3057 15066 13952 14547 6746 15081 2085 7...\n",
              "7835     7835  13009 15271 8370 3057 2085 3055 15081 10393 90...\n",
              "7836     7836  9052 14550 15066 3057 1351 14547 2085 15081 71...\n",
              "7837     7837  88 11379 10793 14828 12630 2191 10791 8504 989...\n",
              "\n",
              "[7838 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5f8a6f1e-39ad-4143-9254-d3201870b9d4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>recommendation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>13010 14255 5254 13995 14284 9021 5326 1298 12...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>30 31 14553 13716 132 7431 15098 9819 8504 15174</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>11379 15066 14850 3057 2142 13952 14049 14552 ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>13010 151 155 8504 11379 12109 11561 2185 5754...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>15205 12672 13010 1807 10401 6925 3168 6746 10...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7833</th>\n",
              "      <td>7833</td>\n",
              "      <td>10588 12632 975 2047 9238 9408 7322 400 14445 ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7834</th>\n",
              "      <td>7834</td>\n",
              "      <td>13009 3057 15066 13952 14547 6746 15081 2085 7...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7835</th>\n",
              "      <td>7835</td>\n",
              "      <td>13009 15271 8370 3057 2085 3055 15081 10393 90...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7836</th>\n",
              "      <td>7836</td>\n",
              "      <td>9052 14550 15066 3057 1351 14547 2085 15081 71...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7837</th>\n",
              "      <td>7837</td>\n",
              "      <td>88 11379 10793 14828 12630 2191 10791 8504 989...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7838 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5f8a6f1e-39ad-4143-9254-d3201870b9d4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5f8a6f1e-39ad-4143-9254-d3201870b9d4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5f8a6f1e-39ad-4143-9254-d3201870b9d4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-9c049dbc-7033-40ba-88cf-afc8f9c4f8de\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9c049dbc-7033-40ba-88cf-afc8f9c4f8de')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-9c049dbc-7033-40ba-88cf-afc8f9c4f8de button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_47827f7a-ad8b-425b-a154-403994d224f8\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('item_bert_recommendations_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_47827f7a-ad8b-425b-a154-403994d224f8 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('item_bert_recommendations_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "item_bert_recommendations_df",
              "summary": "{\n  \"name\": \"item_bert_recommendations_df\",\n  \"rows\": 7838,\n  \"fields\": [\n    {\n      \"column\": \"user_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2262,\n        \"min\": 0,\n        \"max\": 7837,\n        \"num_unique_values\": 7838,\n        \"samples\": [\n          2226,\n          2177,\n          4236\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"recommendation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7552,\n        \"samples\": [\n          \"13009 11383 894 4454 1807 1570 7697 9327 3989 10298\",\n          \"13009 4520 4526 4528 8355 10393 13117 11622 4527 8357\",\n          \"13009 138 865 4208 11379 864 15188 13558 2213 7323\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "p_at_k, r_at_k = precision_recall_at_k(item_bert_prediction, test_data_matrix, k=10)\n",
        "print(f\"Precision@10 = {p_at_k:.4f}\")\n",
        "print(f\"Recall@10 = {r_at_k:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sfhoWD9HlZYL",
        "outputId": "58688b59-fc5c-42a8-f53f-d3bd92192a4d"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Precision@10 = 0.0261\n",
            "Recall@10 = 0.1637\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cross-validation setup\n",
        "seeds = list(range(5))  # 5 random seeds for 5 train-test splits\n",
        "\n",
        "# Evaluate precision and recall for one run\n",
        "def evaluate_one(seed):\n",
        "    train_df, test_df = random_split_per_user(interactions, seed=seed)\n",
        "    train_matrix = create_data_matrix(train_df, n_users, n_items)\n",
        "    prediction_matrix = item_based_predict(train_matrix, bert_sim)\n",
        "    test_matrix = create_data_matrix(test_df, n_users, n_items)\n",
        "    p_at_k, r_at_k = precision_recall_at_k(prediction_matrix, test_matrix, k=10)\n",
        "    return p_at_k, r_at_k\n",
        "\n",
        "# Run evaluations in parallel\n",
        "results = Parallel(n_jobs=-1)(\n",
        "    delayed(evaluate_one)(seed) for seed in seeds\n",
        ")\n",
        "\n",
        "# Extract and average\n",
        "precisions, recalls = zip(*results)\n",
        "mean_precision = np.mean(precisions)\n",
        "mean_recall = np.mean(recalls)\n",
        "\n",
        "# Print results\n",
        "print(f\"Mean Precision@10 = {mean_precision:.4f}\")\n",
        "print(f\"Mean Recall@10    = {mean_recall:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zmL1ZrCpXusQ",
        "outputId": "0d960605-9c61-473b-cb24-93745734da3d"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Precision@10 = 0.0272\n",
            "Mean Recall@10    = 0.1760\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4Kr58GNrCeJf"
      },
      "source": [
        "#### CF Item-based\n",
        "Mean Precision@10 = 0.0585 <br>\n",
        "Mean Recall@10    = 0.2823"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Compute the item-item similarity matrix\n",
        "item_similarity = cosine_similarity(train_data_matrix.T)\n",
        "print(\"Item-Item Similarity Matrix:\")\n",
        "print(item_similarity)\n",
        "print(item_similarity.shape)"
      ],
      "metadata": {
        "id": "jTtXXtiI80jn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d64e7577-4da7-478c-b624-2f4387950c3e"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Item-Item Similarity Matrix:\n",
            "[[1.         0.40824829 0.33333333 ... 0.         0.         0.        ]\n",
            " [0.40824829 1.         0.40824829 ... 0.         0.         0.        ]\n",
            " [0.33333333 0.40824829 1.         ... 0.         0.         0.        ]\n",
            " ...\n",
            " [0.         0.         0.         ... 1.         0.         0.        ]\n",
            " [0.         0.         0.         ... 0.         1.         0.        ]\n",
            " [0.         0.         0.         ... 0.         0.         1.        ]]\n",
            "(15291, 15291)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 57,
      "metadata": {
        "id": "SUFiIfM-CeJf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "87afb9ce-130a-4e2b-e1f5-86fcafacc719"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted Interaction Matrix:\n",
            "[[0.46097255 0.85435984 0.71867834 ... 0.         0.         0.        ]\n",
            " [0.         0.         0.         ... 0.         0.         0.        ]\n",
            " [0.         0.         0.         ... 0.         0.         0.        ]\n",
            " ...\n",
            " [0.         0.         0.         ... 0.         0.         0.        ]\n",
            " [0.         0.         0.         ... 0.         0.         0.        ]\n",
            " [0.         0.         0.         ... 0.         0.         0.        ]]\n",
            "(7838, 15291)\n"
          ]
        }
      ],
      "source": [
        "# Calculate the item-based predictions for positive interactions\n",
        "item_prediction = item_based_predict(train_data_matrix, item_similarity)\n",
        "print(\"Predicted Interaction Matrix:\")\n",
        "print(item_prediction)\n",
        "print(item_prediction.shape)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create recommendation\n",
        "item_CF_recommendations_df = create_recommendation_table(item_prediction, top_n=10, separator=\" \")\n",
        "\n",
        "# Save and display\n",
        "item_CF_recommendations_df.to_csv('item_CF_recommendations.csv', index=False)\n",
        "\n",
        "print(\"\\nItem-based Recommendations:\")\n",
        "display(item_CF_recommendations_df)"
      ],
      "metadata": {
        "id": "cGv6jur-9Lrp",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "outputId": "e50637f9-3152-48bc-d4d1-68ebf9d699e9"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Item-based Recommendations:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "      user_id                                     recommendation\n",
              "0           0                    18 1 2 7 17 0 6 7701 12365 8324\n",
              "1           1                  31 33 36 35 2988 32 29 2442 37 30\n",
              "2           2                      80 76 47 79 72 50 73 52 44 57\n",
              "3           3            134 157 150 132 145 140 116 155 151 147\n",
              "4           4            192 204 202 203 195 200 191 194 196 197\n",
              "...       ...                                                ...\n",
              "7833     7833  975 7322 10460 8670 3167 5116 3245 4558 7307 7312\n",
              "7834     7834  15276 13890 7128 13891 7129 630 12547 9227 134...\n",
              "7835     7835  15247 13016 6223 6317 9957 4820 14875 3055 374...\n",
              "7836     7836  14550 14557 15184 14560 14618 3471 14851 11820...\n",
              "7837     7837  10542 2191 88 1162 9188 3377 3608 13411 9496 6304\n",
              "\n",
              "[7838 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b3738de1-0fa9-4273-8125-74474b3a3f79\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>recommendation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>18 1 2 7 17 0 6 7701 12365 8324</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>31 33 36 35 2988 32 29 2442 37 30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>80 76 47 79 72 50 73 52 44 57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>134 157 150 132 145 140 116 155 151 147</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>192 204 202 203 195 200 191 194 196 197</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7833</th>\n",
              "      <td>7833</td>\n",
              "      <td>975 7322 10460 8670 3167 5116 3245 4558 7307 7312</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7834</th>\n",
              "      <td>7834</td>\n",
              "      <td>15276 13890 7128 13891 7129 630 12547 9227 134...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7835</th>\n",
              "      <td>7835</td>\n",
              "      <td>15247 13016 6223 6317 9957 4820 14875 3055 374...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7836</th>\n",
              "      <td>7836</td>\n",
              "      <td>14550 14557 15184 14560 14618 3471 14851 11820...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7837</th>\n",
              "      <td>7837</td>\n",
              "      <td>10542 2191 88 1162 9188 3377 3608 13411 9496 6304</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7838 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b3738de1-0fa9-4273-8125-74474b3a3f79')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b3738de1-0fa9-4273-8125-74474b3a3f79 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b3738de1-0fa9-4273-8125-74474b3a3f79');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-effcb06b-d92a-4ea1-b3e9-0e7923c988bc\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-effcb06b-d92a-4ea1-b3e9-0e7923c988bc')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-effcb06b-d92a-4ea1-b3e9-0e7923c988bc button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_2c9600f6-b76f-4d37-bd55-bc5c8412ae39\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('item_CF_recommendations_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_2c9600f6-b76f-4d37-bd55-bc5c8412ae39 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('item_CF_recommendations_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "item_CF_recommendations_df",
              "summary": "{\n  \"name\": \"item_CF_recommendations_df\",\n  \"rows\": 7838,\n  \"fields\": [\n    {\n      \"column\": \"user_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2262,\n        \"min\": 0,\n        \"max\": 7837,\n        \"num_unique_values\": 7838,\n        \"samples\": [\n          2226,\n          2177,\n          4236\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"recommendation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7544,\n        \"samples\": [\n          \"6822 6821 11172 9144 6824 2073 11821 14518 496 2067\",\n          \"4526 4527 4520 4525 4522 4528 4523 1948 4524 1947\",\n          \"13781 8100 11187 8099 14232 12649 8759 9813 12594 11211\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "p_at_k, r_at_k = precision_recall_at_k(item_prediction, test_data_matrix, k=10)\n",
        "print(f\"Precision@10 = {p_at_k:.4f}\")\n",
        "print(f\"Recall@10 = {r_at_k:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "znrPsTl8buq5",
        "outputId": "d8327493-3a8c-4317-e83a-5568ada6d9ae"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Precision@10 = 0.0557\n",
            "Recall@10 = 0.2640\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Cross Validation\n",
        "def evaluate_one(seed):\n",
        "    train_df, test_df = random_split_per_user(interactions, seed=seed)\n",
        "    train_matrix = create_data_matrix(train_df, n_users, n_items)\n",
        "\n",
        "    # Compute similarity from current train split\n",
        "    item_sim = cosine_similarity(train_matrix.T)\n",
        "    prediction_matrix = item_based_predict(train_matrix, item_sim)\n",
        "\n",
        "    # Evaluate on corresponding test set\n",
        "    test_matrix = create_data_matrix(test_df, n_users, n_items)\n",
        "    p_at_k, r_at_k = precision_recall_at_k(prediction_matrix, test_matrix, k=10)\n",
        "\n",
        "    return p_at_k, r_at_k\n",
        "\n",
        "# Run cross-validation\n",
        "seeds = list(range(5))\n",
        "results = Parallel(n_jobs=-1)(\n",
        "    delayed(evaluate_one)(seed) for seed in seeds\n",
        ")\n",
        "\n",
        "# Unpack and average\n",
        "precisions, recalls = zip(*results)\n",
        "mean_precision = np.mean(precisions)\n",
        "mean_recall = np.mean(recalls)\n",
        "\n",
        "# Print results\n",
        "print(f\"Mean Precision@10 = {mean_precision:.4f}\")\n",
        "print(f\"Mean Recall@10    = {mean_recall:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VJXBEQqeFIm9",
        "outputId": "64b0420b-77d4-4da9-e859-7c3f0b96e1e9"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Precision@10 = 0.0585\n",
            "Mean Recall@10    = 0.2823\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "####CF User-based\n",
        "Mean Precision@10 = 0.0612 <br>\n",
        "Mean Recall@10    = 0.3167"
      ],
      "metadata": {
        "id": "T5r6nspg9d3n"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Compute the user-user similarity matrix\n",
        "user_similarity = cosine_similarity(train_data_matrix)\n",
        "print(\"User-User Similarity Matrix:\")\n",
        "print(user_similarity)\n",
        "\n",
        "# Check the shape as a sanity check\n",
        "print(\"Shape of User Similarity Matrix:\", user_similarity.shape)"
      ],
      "metadata": {
        "id": "isr5ALh79ikm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "098cc960-4f86-4ad3-e7b8-3352289f1a08"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "User-User Similarity Matrix:\n",
            "[[1. 0. 0. ... 0. 0. 0.]\n",
            " [0. 1. 0. ... 0. 0. 0.]\n",
            " [0. 0. 1. ... 0. 0. 0.]\n",
            " ...\n",
            " [0. 0. 0. ... 1. 0. 0.]\n",
            " [0. 0. 0. ... 0. 1. 0.]\n",
            " [0. 0. 0. ... 0. 0. 1.]]\n",
            "Shape of User Similarity Matrix: (7838, 7838)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the function to predict interactions based on user similarity\n",
        "def user_based_predict(interactions, similarity, epsilon=1e-9):\n",
        "    \"\"\"\n",
        "    Predicts user-item interactions based on user-user similarity.\n",
        "    Parameters:\n",
        "        interactions (numpy array): The user-item interaction matrix.\n",
        "        similarity (numpy array): The user-user similarity matrix.\n",
        "        epsilon (float): Small constant added to the denominator to avoid division by zero.\n",
        "    Returns:\n",
        "        numpy array: The predicted interaction scores for each user-item pair.\n",
        "    \"\"\"\n",
        "    # Calculate the weighted sum of interactions based on user similarity\n",
        "    pred = similarity.dot(interactions) / (np.abs(similarity).sum(axis=1)[:, np.newaxis] + epsilon)\n",
        "    return pred\n",
        "\n",
        "# Calculate the user-based predictions for positive interactions\n",
        "user_prediction = user_based_predict(train_data_matrix, user_similarity)\n",
        "print(\"Predicted Interaction Matrix (User-Based):\")\n",
        "print(user_prediction)\n",
        "print(user_prediction.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3WasMMoSe0f0",
        "outputId": "951f5f49-e55d-45fe-84ab-beb6e35338bd"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted Interaction Matrix (User-Based):\n",
            "[[0.13171649 0.13259591 0.14274867 ... 0.         0.         0.        ]\n",
            " [0.         0.         0.         ... 0.         0.         0.        ]\n",
            " [0.         0.         0.         ... 0.         0.         0.        ]\n",
            " ...\n",
            " [0.         0.         0.         ... 0.         0.         0.        ]\n",
            " [0.         0.         0.         ... 0.         0.         0.        ]\n",
            " [0.         0.         0.         ... 0.         0.         0.        ]]\n",
            "(7838, 15291)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create recommendation\n",
        "user_CF_recommendations_df = create_recommendation_table(user_prediction, top_n=10, separator=\" \")\n",
        "\n",
        "# Save and display\n",
        "user_CF_recommendations_df.to_csv('user_CF_recommendations.csv', index=False)\n",
        "\n",
        "print(\"\\nuser-based Recommendations:\")\n",
        "display(user_CF_recommendations_df)"
      ],
      "metadata": {
        "id": "EicX4UF7-LIS",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "outputId": "fa7ad0d2-89f4-4448-c012-78b394bca95c"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "user-based Recommendations:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "      user_id                                     recommendation\n",
              "0           0                          13 4 12 15 11 14 8 10 9 5\n",
              "1           1                    34 30 29 37 31 32 33 36 35 1573\n",
              "2           2                      46 58 53 49 56 82 64 75 45 67\n",
              "3           3             149 40 138 155 128 142 143 156 133 139\n",
              "4           4            202 198 191 203 193 201 197 196 199 195\n",
              "...       ...                                                ...\n",
              "7833     7833   975 7322 3121 3167 5119 3151 5118 4235 5117 5116\n",
              "7834     7834  13891 7128 15276 8999 8413 7129 13890 101 3019...\n",
              "7835     7835     3055 4820 11126 1367 53 45 3019 8999 2125 8367\n",
              "7836     7836  14550 3471 611 8999 14557 10914 14555 7115 139...\n",
              "7837     7837   88 2191 3377 9669 1162 4901 7137 10542 3899 3237\n",
              "\n",
              "[7838 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-989c6f64-8d1c-4276-a153-4ba469c68a09\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>recommendation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>13 4 12 15 11 14 8 10 9 5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>34 30 29 37 31 32 33 36 35 1573</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>46 58 53 49 56 82 64 75 45 67</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>149 40 138 155 128 142 143 156 133 139</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>202 198 191 203 193 201 197 196 199 195</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7833</th>\n",
              "      <td>7833</td>\n",
              "      <td>975 7322 3121 3167 5119 3151 5118 4235 5117 5116</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7834</th>\n",
              "      <td>7834</td>\n",
              "      <td>13891 7128 15276 8999 8413 7129 13890 101 3019...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7835</th>\n",
              "      <td>7835</td>\n",
              "      <td>3055 4820 11126 1367 53 45 3019 8999 2125 8367</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7836</th>\n",
              "      <td>7836</td>\n",
              "      <td>14550 3471 611 8999 14557 10914 14555 7115 139...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7837</th>\n",
              "      <td>7837</td>\n",
              "      <td>88 2191 3377 9669 1162 4901 7137 10542 3899 3237</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7838 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-989c6f64-8d1c-4276-a153-4ba469c68a09')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-989c6f64-8d1c-4276-a153-4ba469c68a09 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-989c6f64-8d1c-4276-a153-4ba469c68a09');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-727da473-8a61-41c9-9ced-ab4ef5ccc41d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-727da473-8a61-41c9-9ced-ab4ef5ccc41d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-727da473-8a61-41c9-9ced-ab4ef5ccc41d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_7eb4fa67-45f3-418e-8333-2ffcdf7650b3\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('user_CF_recommendations_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_7eb4fa67-45f3-418e-8333-2ffcdf7650b3 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('user_CF_recommendations_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "user_CF_recommendations_df",
              "summary": "{\n  \"name\": \"user_CF_recommendations_df\",\n  \"rows\": 7838,\n  \"fields\": [\n    {\n      \"column\": \"user_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2262,\n        \"min\": 0,\n        \"max\": 7837,\n        \"num_unique_values\": 7838,\n        \"samples\": [\n          2226,\n          2177,\n          4236\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"recommendation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7540,\n        \"samples\": [\n          \"4791 5935 13320 13319 13321 11111 6990 8808 5929 14029\",\n          \"3021 9052 12513 14929 13134 14427 14166 9054 14163 8999\",\n          \"3811 8966 6545 10029 10881 2309 466 149 879 618\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "p_at_k, r_at_k = precision_recall_at_k(user_prediction, test_data_matrix, k=10)\n",
        "print(f\"Precision@10 = {p_at_k:.4f}\")\n",
        "print(f\"Recall@10 = {r_at_k:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VceLpju8dUFY",
        "outputId": "b7509ea1-7540-4717-e3cd-ce41a28942b1"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Precision@10 = 0.0565\n",
            "Recall@10 = 0.2905\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Cross Validation\n",
        "def evaluate_one(seed):\n",
        "    train_df, test_df = random_split_per_user(interactions, seed=seed)\n",
        "    train_matrix = create_data_matrix(train_df, n_users, n_items)\n",
        "\n",
        "    # Compute similarity from current train split\n",
        "    user_sim = cosine_similarity(train_matrix)\n",
        "    prediction_matrix = user_based_predict(train_matrix, user_sim)\n",
        "\n",
        "    # Evaluate on corresponding test set\n",
        "    test_matrix = create_data_matrix(test_df, n_users, n_items)\n",
        "    p_at_k, r_at_k = precision_recall_at_k(prediction_matrix, test_matrix, k=10)\n",
        "\n",
        "    return p_at_k, r_at_k\n",
        "\n",
        "# Run cross-validation\n",
        "seeds = list(range(5))\n",
        "results = Parallel(n_jobs=-1)(\n",
        "    delayed(evaluate_one)(seed) for seed in seeds\n",
        ")\n",
        "\n",
        "# Unpack and average\n",
        "precisions, recalls = zip(*results)\n",
        "mean_precision = np.mean(precisions)\n",
        "mean_recall = np.mean(recalls)\n",
        "\n",
        "# Print results\n",
        "print(f\"Mean Precision@10 = {mean_precision:.4f}\")\n",
        "print(f\"Mean Recall@10    = {mean_recall:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qkhjddgAckKc",
        "outputId": "027b131c-97ef-4ff6-ef1c-341f01305dea"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Precision@10 = 0.0612\n",
            "Mean Recall@10    = 0.3167\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Hybrid Model testing\n",
        "between:\n",
        "1.   item_similarity\n",
        "2.   bert_sim\n",
        "3.   tfidf_sim\n",
        "4.   embedding_sim\n",
        "5.  user_sim\n",
        "\n",
        "<table border=\"1\" style=\"border-collapse: collapse; text-align: left;\">\n",
        "  <caption style=\"font-size: 18px; font-weight: bold; padding: 10px;\"> </caption>\n",
        "  <thead>\n",
        "    <tr>\n",
        "      <th>Blending Stage</th>\n",
        "      <th>Use When...</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <td>Prediction-level</td>\n",
        "      <td>Models use different mechanics (CF, BERT, popularity)</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>Similarity-level</td>\n",
        "      <td>All models are similarity-based and aligned (e.g., TF-IDF + BERT)</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "RVudNK4UtkFV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Alpha tuning + cross validaing w. random train-test splits"
      ],
      "metadata": {
        "id": "tnag9C_ttkFV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#running in parallell\n",
        "alpha_values = np.linspace(0, 1, 6)\n",
        "seeds = list(range(5))\n",
        "\n",
        "# One evaluation run for a single (alpha, seed) pair\n",
        "def evaluate_one(alpha, seed):\n",
        "    train_df, test_df = random_split_per_user(interactions, seed=seed)\n",
        "    train_matrix = create_data_matrix(train_df, n_users, n_items)\n",
        "    hybrid_sim = alpha * item_similarity + (1 - alpha) * item_similarity #here change sim to sim we want!\n",
        "    prediction_matrix = item_based_predict(train_matrix, hybrid_sim)\n",
        "    test_matrix = create_data_matrix(test_df, n_users, n_items)\n",
        "    p_at_k = precision_recall_at_k(prediction_matrix, test_matrix, k=10)\n",
        "    return (alpha, p_at_k)\n",
        "\n",
        "# Run all combinations in parallel\n",
        "results = Parallel(n_jobs=-1)(\n",
        "    delayed(evaluate_one)(alpha, seed)\n",
        "    for alpha in alpha_values\n",
        "    for seed in seeds\n",
        ")\n",
        "\n",
        "# Aggregate results by alpha\n",
        "by_alpha = defaultdict(list)\n",
        "for alpha, precision in results:\n",
        "    by_alpha[alpha].append(precision)\n",
        "\n",
        "# Report means\n",
        "for alpha in sorted(by_alpha.keys()):\n",
        "    mean_p = np.mean(by_alpha[alpha])\n",
        "    print(f\"alpha = {alpha:.1f} → mean Precision@10 = {mean_p:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "05418951-b414-4ffa-ba7a-44670a78dac7",
        "id": "5O4k3qNWtkFW"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "alpha = 0.0 → mean Precision@10 = 0.1036\n",
            "alpha = 0.2 → mean Precision@10 = 0.1130\n",
            "alpha = 0.4 → mean Precision@10 = 0.1109\n",
            "alpha = 0.6 → mean Precision@10 = 0.1026\n",
            "alpha = 0.8 → mean Precision@10 = 0.0782\n",
            "alpha = 1.0 → mean Precision@10 = 0.0149\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_kaggle_matrix = create_data_matrix(interactions, n_users, n_items)"
      ],
      "metadata": {
        "id": "yIUE3biRtkFW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "hybrid_sim_tf_item = 0.2 * tfidf_sim + (1 - 0.2) * item_similarity"
      ],
      "metadata": {
        "id": "Z_bgj9RmtkFW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate the item-based predictions for positive interactions\n",
        "item_prediction = item_based_predict(train_kaggle_matrix, hybrid_sim_tf_item)\n",
        "print(\"Predicted Interaction Matrix:\")\n",
        "print(item_prediction)\n",
        "print(item_prediction.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9bf9c800-f1cd-4e90-f1c6-a1a1a23c85f9",
        "id": "SbvqtCvRtkFX"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted Interaction Matrix:\n",
            "[[2.65886616e-01 2.90080218e-01 2.65197196e-01 ... 0.00000000e+00\n",
            "  8.79440059e-04 9.65572629e-04]\n",
            " [0.00000000e+00 2.06567322e-04 5.75873753e-04 ... 0.00000000e+00\n",
            "  1.96614989e-03 3.32813416e-04]\n",
            " [1.42369587e-03 9.08401287e-04 1.61234917e-03 ... 3.19873920e-02\n",
            "  3.34122545e-02 1.84868647e-03]\n",
            " ...\n",
            " [0.00000000e+00 3.15668202e-05 0.00000000e+00 ... 3.87327548e-03\n",
            "  1.64930141e-03 0.00000000e+00]\n",
            " [0.00000000e+00 1.70350220e-05 4.29579013e-05 ... 3.05201971e-03\n",
            "  1.58728431e-03 4.78381063e-05]\n",
            " [0.00000000e+00 1.36897791e-04 7.29899057e-05 ... 0.00000000e+00\n",
            "  7.45820237e-04 2.19869433e-04]]\n",
            "(7838, 15291)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create recommendation\n",
        "item_hybrid_tfidf_item_recommendations_df = create_recommendation_table(item_prediction, top_n=10, separator=\" \")\n",
        "\n",
        "# Save and display\n",
        "item_hybrid_tfidf_item_recommendations_df.to_csv('item_hybrid1_recommendations.csv', index=False)"
      ],
      "metadata": {
        "id": "DSu42jW7tkFX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### step 1.1: Combine CF + BERT\n",
        "content_sim = 0.5 * tfidf_sim + 0.5 * embed_sim"
      ],
      "metadata": {
        "id": "D_x7vIH9OA5R"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### step 1.2: Combine CF + TF-IDF\n",
        "content_sim = 0.5 * tfidf_sim + 0.5 * embed_sim"
      ],
      "metadata": {
        "id": "SpCoPYpvNnOO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### step 1.3: Combine CF + Google API\n",
        "content_sim = 0.5 * tfidf_sim + 0.5 * embed_sim"
      ],
      "metadata": {
        "id": "HlhWVXBfOPTW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### step 2.1: Combine TF-IDF + BERT\n",
        "content_sim = 0.5 * tfidf_sim + 0.5 * embed_sim"
      ],
      "metadata": {
        "id": "40_fjJyyNw-k"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### step 2.2 : Combine TF-IDF + GOOGLE API\n",
        "content_sim = 0.5 * tfidf_sim + 0.5 * embed_sim"
      ],
      "metadata": {
        "id": "Zagk2bWDN2IM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### step 2: Combine BERT + GOOGLE API\n",
        "content_sim = 0.5 * tfidf_sim + 0.5 * embed_sim"
      ],
      "metadata": {
        "id": "PRhaTR9AN5Pn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Random tries"
      ],
      "metadata": {
        "id": "BvWw4NlktnZV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Trying the amazon model [content, item & popularity]\n",
        "# 1. Item-based CF prediction\n",
        "item_cf_pred = item_based_predict(train_data_matrix, item_sim)\n",
        "\n",
        "# 2. Content-based prediction (e.g., from BERT or TF-IDF)\n",
        "content_pred = item_based_predict(train_data_matrix, tfidf_sim)\n",
        "\n",
        "# 3. Popularity score: frequency of item interactions\n",
        "item_popularity = train_data_matrix.sum(axis=0)  # shape: (n_items,)\n",
        "popularity_pred = np.tile(item_popularity, (train_data_matrix.shape[0], 1))\n",
        "\n",
        "# 4. Normalize all predictions (important for blending)\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "def normalize_rows(matrix):\n",
        "    scaler = MinMaxScaler()\n",
        "    return scaler.fit_transform(matrix)\n",
        "\n",
        "item_cf_pred = normalize_rows(item_cf_pred)\n",
        "content_pred = normalize_rows(content_pred)\n",
        "popularity_pred = normalize_rows(popularity_pred)\n",
        "\n",
        "# 5. Weighted blend (adjust alpha/beta/gamma)\n",
        "alpha, beta, gamma = 0.4, 0.4, 0.2\n",
        "hybrid_pred = alpha * item_cf_pred + beta * content_pred + gamma * popularity_pred\n",
        "\n",
        "#tune\n",
        "alpha, beta, gamma"
      ],
      "metadata": {
        "id": "INP5SDentJyi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import itertools\n",
        "\n",
        "# Step 1: Define possible values for alpha, beta, gamma (sum to 1)\n",
        "values = np.linspace(0, 1, 11)  # e.g., 0.0, 0.1, ..., 1.0\n",
        "triplets = [\n",
        "    (a, b, 1 - a - b)\n",
        "    for a, b in itertools.product(values, values)\n",
        "    if 0 <= 1 - a - b <= 1\n",
        "]\n",
        "\n",
        "# Step 3: Evaluate each combination\n",
        "best_precision = 0\n",
        "best_params = None\n",
        "\n",
        "for alpha, beta, gamma in triplets:\n",
        "    hybrid_pred = alpha * item_cf_pred + beta * content_pred + gamma * popularity_pred\n",
        "    p_at_k, _ = precision_recall_at_k(hybrid_pred, test_data_matrix, k=10)\n",
        "\n",
        "    if p_at_k > best_precision:\n",
        "        best_precision = p_at_k\n",
        "        best_params = (alpha, beta, gamma)\n",
        "\n",
        "# Step 4: Print best combination\n",
        "print(f\"Best alpha, beta, gamma = {best_params}\")\n",
        "print(f\"Best Precision@10 = {best_precision:.4f}\")\n"
      ],
      "metadata": {
        "id": "LvCbDHTyva2j"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### hyperparameter tuning user-user [no cross-validation]"
      ],
      "metadata": {
        "id": "Cu5QjERb5Plp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats import pearsonr\n",
        "# ---------- Utilities ----------\n",
        "\n",
        "def compute_user_similarity(matrix, metric='cosine'):\n",
        "    if metric == 'cosine':\n",
        "        return cosine_similarity(matrix)\n",
        "    elif metric == 'pearson':\n",
        "        n_users = matrix.shape[0]\n",
        "        sim = np.zeros((n_users, n_users))\n",
        "        for i in range(n_users):\n",
        "            for j in range(n_users):\n",
        "                sim[i, j], _ = pearsonr(matrix[i], matrix[j])\n",
        "        return np.nan_to_num(sim)\n",
        "\n",
        "def user_based_knn_predict(interactions, similarity, k=50):\n",
        "    pred = np.zeros_like(interactions)\n",
        "    for i in range(interactions.shape[0]):\n",
        "        top_k_users = np.argsort(similarity[i])[-k:]\n",
        "        sim_scores = similarity[i, top_k_users]\n",
        "        user_matrix = interactions[top_k_users]\n",
        "        pred[i] = sim_scores @ user_matrix / (np.sum(sim_scores) + 1e-9)\n",
        "    return pred\n",
        "\n",
        "# ---------- Hyperparameter grid ----------\n",
        "k_values = list(range(50, 201, 25))\n",
        "similarity_metrics = ['cosine', 'pearson']\n",
        "normalizations = [True, False]\n",
        "\n",
        "# ---------- Grid Search ----------\n",
        "results = []\n",
        "\n",
        "for sim_metric in similarity_metrics:\n",
        "    for normalize_flag in normalizations:\n",
        "        for k in k_values:\n",
        "            print(f\"Testing → sim: {sim_metric}, normalize: {normalize_flag}, k: {k}\")\n",
        "\n",
        "            # Shuffle interactions per user\n",
        "            shuffled_interactions = (\n",
        "                interactions.groupby(\"user_id\", group_keys=False)\n",
        "                .apply(lambda df: df.sample(frac=1, random_state=np.random.randint(0, 100000)))\n",
        "                .reset_index(drop=True)\n",
        "            )\n",
        "\n",
        "            # Create ranking\n",
        "            shuffled_interactions[\"interaction_order\"] = shuffled_interactions.groupby(\"user_id\").cumcount() + 1\n",
        "            shuffled_interactions[\"pct_rank\"] = (\n",
        "                shuffled_interactions[\"interaction_order\"] /\n",
        "                shuffled_interactions.groupby(\"user_id\")[\"interaction_order\"].transform(\"max\")\n",
        "            )\n",
        "\n",
        "            # Train/test split\n",
        "            train_data = shuffled_interactions[shuffled_interactions[\"pct_rank\"] < 0.8]\n",
        "            test_data = shuffled_interactions[shuffled_interactions[\"pct_rank\"] >= 0.8]\n",
        "\n",
        "            # Create matrices\n",
        "            train_matrix = create_data_matrix(train_data, n_users, n_items)\n",
        "            test_matrix = create_data_matrix(test_data, n_users, n_items)\n",
        "\n",
        "            if normalize_flag:\n",
        "                train_matrix = normalize(train_matrix, axis=1)\n",
        "\n",
        "            # Compute similarity and predict\n",
        "            sim_matrix = compute_user_similarity(train_matrix, metric=sim_metric)\n",
        "            preds = user_based_knn_predict(train_matrix, sim_matrix, k=k)\n",
        "\n",
        "            # Evaluate\n",
        "            p, r = precision_recall_at_k(preds, test_matrix, k=10)\n",
        "            results.append({\n",
        "                \"k\": k,\n",
        "                \"sim_metric\": sim_metric,\n",
        "                \"normalize\": normalize_flag,\n",
        "                \"precision\": p,\n",
        "                \"recall\": r\n",
        "            })\n",
        "\n",
        "# ---------- Results ----------\n",
        "results_df = pd.DataFrame(results)\n",
        "best = results_df.sort_values(\"precision\", ascending=False).iloc[0]\n",
        "print(\"\\n🏆 Best Config:\")\n",
        "print(best)\n",
        "\n",
        "# Plot\n",
        "pivot = results_df.pivot_table(index=\"k\", columns=\"sim_metric\", values=\"precision\")\n",
        "pivot.plot(marker='o', title=\"Precision@10 across similarity metrics\", ylabel=\"Precision@10\", xlabel=\"k\")\n",
        "plt.grid(True)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "PU61lr5J1gCm",
        "outputId": "d05ff2f2-eac0-43cf-eed1-f55930cb28f1"
      },
      "execution_count": 18,
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Testing → sim: cosine, normalize: True, k: 50\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-18-72ecfecbc397>:40: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
            "  .apply(lambda df: df.sample(frac=1, random_state=np.random.randint(0, 100000)))\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Testing → sim: cosine, normalize: True, k: 75\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-18-72ecfecbc397>:40: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
            "  .apply(lambda df: df.sample(frac=1, random_state=np.random.randint(0, 100000)))\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Testing → sim: cosine, normalize: True, k: 100\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-18-72ecfecbc397>:40: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
            "  .apply(lambda df: df.sample(frac=1, random_state=np.random.randint(0, 100000)))\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Testing → sim: cosine, normalize: True, k: 125\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-18-72ecfecbc397>:40: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
            "  .apply(lambda df: df.sample(frac=1, random_state=np.random.randint(0, 100000)))\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Testing → sim: cosine, normalize: True, k: 150\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-18-72ecfecbc397>:40: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
            "  .apply(lambda df: df.sample(frac=1, random_state=np.random.randint(0, 100000)))\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Testing → sim: cosine, normalize: True, k: 175\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-18-72ecfecbc397>:40: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
            "  .apply(lambda df: df.sample(frac=1, random_state=np.random.randint(0, 100000)))\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Testing → sim: cosine, normalize: True, k: 200\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-18-72ecfecbc397>:40: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
            "  .apply(lambda df: df.sample(frac=1, random_state=np.random.randint(0, 100000)))\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Testing → sim: cosine, normalize: False, k: 50\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-18-72ecfecbc397>:40: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
            "  .apply(lambda df: df.sample(frac=1, random_state=np.random.randint(0, 100000)))\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Testing → sim: cosine, normalize: False, k: 75\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-18-72ecfecbc397>:40: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
            "  .apply(lambda df: df.sample(frac=1, random_state=np.random.randint(0, 100000)))\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Testing → sim: cosine, normalize: False, k: 100\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-18-72ecfecbc397>:40: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
            "  .apply(lambda df: df.sample(frac=1, random_state=np.random.randint(0, 100000)))\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Testing → sim: cosine, normalize: False, k: 125\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-18-72ecfecbc397>:40: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
            "  .apply(lambda df: df.sample(frac=1, random_state=np.random.randint(0, 100000)))\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Testing → sim: cosine, normalize: False, k: 150\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-18-72ecfecbc397>:40: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
            "  .apply(lambda df: df.sample(frac=1, random_state=np.random.randint(0, 100000)))\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Testing → sim: cosine, normalize: False, k: 175\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-18-72ecfecbc397>:40: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
            "  .apply(lambda df: df.sample(frac=1, random_state=np.random.randint(0, 100000)))\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Testing → sim: cosine, normalize: False, k: 200\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-18-72ecfecbc397>:40: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
            "  .apply(lambda df: df.sample(frac=1, random_state=np.random.randint(0, 100000)))\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Testing → sim: pearson, normalize: True, k: 50\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-18-72ecfecbc397>:40: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
            "  .apply(lambda df: df.sample(frac=1, random_state=np.random.randint(0, 100000)))\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-18-72ecfecbc397>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     61\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m             \u001b[0;31m# Compute similarity and predict\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 63\u001b[0;31m             \u001b[0msim_matrix\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcompute_user_similarity\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_matrix\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetric\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msim_metric\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m             \u001b[0mpreds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0muser_based_knn_predict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_matrix\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msim_matrix\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-18-72ecfecbc397>\u001b[0m in \u001b[0;36mcompute_user_similarity\u001b[0;34m(matrix, metric)\u001b[0m\n\u001b[1;32m     10\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_users\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_users\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m                 \u001b[0msim\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpearsonr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan_to_num\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msim\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/scipy/stats/_stats_py.py\u001b[0m in \u001b[0;36mpearsonr\u001b[0;34m(x, y, alternative, method, axis)\u001b[0m\n\u001b[1;32m   4629\u001b[0m     \u001b[0;31m# also raises an error with NaN input rather than returning NaN, so\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4630\u001b[0m     \u001b[0;31m# use np.linalg.norm.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4631\u001b[0;31m     \u001b[0mxmax\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mxp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxm\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeepdims\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4632\u001b[0m     \u001b[0mymax\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mxp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mym\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeepdims\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4633\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merrstate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minvalid\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'ignore'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdivide\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'ignore'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### hyperparameter tuning knn tuning item-item [no cross validation]"
      ],
      "metadata": {
        "id": "ORQecCNk5fYk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# ----- Helper Functions -----\n",
        "\n",
        "def compute_item_similarity(matrix, metric='cosine'):\n",
        "    if metric == 'cosine':\n",
        "        return cosine_similarity(matrix.T)\n",
        "    elif metric == 'pearson':\n",
        "        n_items = matrix.shape[1]\n",
        "        sim = np.zeros((n_items, n_items))\n",
        "        for i in range(n_items):\n",
        "            for j in range(n_items):\n",
        "                sim[i, j], _ = pearsonr(matrix[:, i], matrix[:, j])\n",
        "        return np.nan_to_num(sim)\n",
        "\n",
        "def item_based_knn_predict(interactions, similarity, k=50):\n",
        "    pred = np.zeros_like(interactions)\n",
        "    for j in range(interactions.shape[1]):\n",
        "        top_k_items = np.argsort(similarity[j])[-k:]\n",
        "        sim_scores = similarity[j, top_k_items]\n",
        "        item_matrix = interactions[:, top_k_items]\n",
        "        pred[:, j] = item_matrix @ sim_scores / (np.sum(sim_scores) + 1e-9)\n",
        "    return pred\n",
        "\n",
        "# ----- Cross-Validated Grid Search -----\n",
        "\n",
        "k_values = list(range(50, 201, 50))\n",
        "similarity_metrics = ['cosine', 'pearson']\n",
        "normalizations = [True, False]\n",
        "n_splits = 5\n",
        "\n",
        "results_item = []\n",
        "\n",
        "for sim_metric in similarity_metrics:\n",
        "    for normalize_flag in normalizations:\n",
        "        for k in k_values:\n",
        "            print(f\"Item-Item → sim: {sim_metric}, normalize: {normalize_flag}, k: {k}\")\n",
        "            precision_scores = []\n",
        "            recall_scores = []\n",
        "\n",
        "            for seed in range(n_splits):\n",
        "                # Shuffle and split interactions per user\n",
        "                shuffled = (\n",
        "                    interactions.groupby(\"user_id\", group_keys=False)\n",
        "                    .apply(lambda df: df.sample(frac=1, random_state=seed), include_groups=False)\n",
        "                    .reset_index(drop=True)\n",
        "                )\n",
        "                shuffled[\"interaction_order\"] = shuffled.groupby(\"user_id\").cumcount() + 1\n",
        "                shuffled[\"pct_rank\"] = shuffled[\"interaction_order\"] / shuffled.groupby(\"user_id\")[\"interaction_order\"].transform(\"max\")\n",
        "\n",
        "                train_data = shuffled[shuffled[\"pct_rank\"] < 0.8]\n",
        "                test_data = shuffled[shuffled[\"pct_rank\"] >= 0.8]\n",
        "\n",
        "                train_matrix = create_data_matrix(train_data, n_users, n_items)\n",
        "                test_matrix = create_data_matrix(test_data, n_users, n_items)\n",
        "\n",
        "                if normalize_flag:\n",
        "                    train_matrix = normalize(train_matrix, axis=0)\n",
        "\n",
        "                sim_matrix = compute_item_similarity(train_matrix, metric=sim_metric)\n",
        "                preds = item_based_knn_predict(train_matrix, sim_matrix, k=k)\n",
        "\n",
        "                p, r = precision_recall_at_k(preds, test_matrix, k=10)\n",
        "                precision_scores.append(p)\n",
        "                recall_scores.append(r)\n",
        "\n",
        "            # Store mean + std\n",
        "            results_item.append({\n",
        "                \"k\": k,\n",
        "                \"sim_metric\": sim_metric,\n",
        "                \"normalize\": normalize_flag,\n",
        "                \"precision\": np.mean(precision_scores),\n",
        "                \"recall\": np.mean(recall_scores),\n",
        "                \"std_precision\": np.std(precision_scores)\n",
        "            })\n",
        "\n",
        "# ----- Results -----\n",
        "\n",
        "results_df_item = pd.DataFrame(results_item)\n",
        "best_item = results_df_item.sort_values(\"precision\", ascending=False).iloc[0]\n",
        "print(\"\\n Best Item-Item Config:\")\n",
        "print(best_item)\n",
        "\n",
        "# Plotting\n",
        "pivot_item = results_df_item.pivot_table(index=\"k\", columns=\"sim_metric\", values=\"precision\")\n",
        "pivot_item.plot(marker='o', title=\"Item-Item CF: Precision@10 (Cross-Validated)\", ylabel=\"Precision@10\", xlabel=\"k\")\n",
        "plt.grid(True)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "yNzlkR9Z5YVW"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "anaconda-cloud": {},
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "s421o1vwIpQL"
      ],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.9"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "fe20c3a2c25a4e1c885dd27f5ded2d52": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_64e77f6f73654c95ae074b8fef5b9388",
              "IPY_MODEL_276a609f8da24c02abb034f451076108",
              "IPY_MODEL_6ae60a46a48b4b50bac7758f75509781"
            ],
            "layout": "IPY_MODEL_39199447777a4558be8c596e02c11cb5"
          }
        },
        "64e77f6f73654c95ae074b8fef5b9388": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_209118f3aaba48d69d17132cc7145897",
            "placeholder": "​",
            "style": "IPY_MODEL_4ddea6c211fa489bb4e78237370b9bea",
            "value": "modules.json: 100%"
          }
        },
        "276a609f8da24c02abb034f451076108": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_504e8aa45c0748f5bdd200869a57f309",
            "max": 349,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_ccd6e37f8efb48e39df6ecad5b3fa5f8",
            "value": 349
          }
        },
        "6ae60a46a48b4b50bac7758f75509781": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6b9b849c0ea94ca7a9b15e3813554cb5",
            "placeholder": "​",
            "style": "IPY_MODEL_b5a0ec6b12ab49f384967c6ee3c2a41b",
            "value": " 349/349 [00:00&lt;00:00, 42.1kB/s]"
          }
        },
        "39199447777a4558be8c596e02c11cb5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "209118f3aaba48d69d17132cc7145897": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4ddea6c211fa489bb4e78237370b9bea": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "504e8aa45c0748f5bdd200869a57f309": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ccd6e37f8efb48e39df6ecad5b3fa5f8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "6b9b849c0ea94ca7a9b15e3813554cb5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b5a0ec6b12ab49f384967c6ee3c2a41b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1266bf4b8a7840a4bb4fc3f2dda139e9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_cd9a0e1e93944b88b45831042751cf6a",
              "IPY_MODEL_1373adfe677d42d0b5aed6a1799e32d8",
              "IPY_MODEL_bbd3ee982b52435db57a9c41263f296c"
            ],
            "layout": "IPY_MODEL_a2a02e2df85644c6ac53ac8172440a7a"
          }
        },
        "cd9a0e1e93944b88b45831042751cf6a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_652c0a900ecf4fa4997c56470a67683b",
            "placeholder": "​",
            "style": "IPY_MODEL_b86f6abc67e044758be51b2fa50f6419",
            "value": "config_sentence_transformers.json: 100%"
          }
        },
        "1373adfe677d42d0b5aed6a1799e32d8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8dd03b6008634c67b52f936ffb627aad",
            "max": 116,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_36abd9e15dd24d6d905f1bdc599c46cb",
            "value": 116
          }
        },
        "bbd3ee982b52435db57a9c41263f296c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8f05e0ccb94d46a5bfc5ece8eba79117",
            "placeholder": "​",
            "style": "IPY_MODEL_cb427c338bbc43ddbe00aa9fa73dd3a5",
            "value": " 116/116 [00:00&lt;00:00, 16.7kB/s]"
          }
        },
        "a2a02e2df85644c6ac53ac8172440a7a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "652c0a900ecf4fa4997c56470a67683b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b86f6abc67e044758be51b2fa50f6419": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8dd03b6008634c67b52f936ffb627aad": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "36abd9e15dd24d6d905f1bdc599c46cb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "8f05e0ccb94d46a5bfc5ece8eba79117": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cb427c338bbc43ddbe00aa9fa73dd3a5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1f7fb2e3d80642a38af086fd7b1b1d02": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_1237210347264c52ad30bc1334426ffa",
              "IPY_MODEL_68c74abbcff147b9b1aad9a4dcccf5e6",
              "IPY_MODEL_5d0705fe801c47c6b1559217e9c20dbd"
            ],
            "layout": "IPY_MODEL_0d94cf03c2394be8a797744faf449391"
          }
        },
        "1237210347264c52ad30bc1334426ffa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_26889e94b7d94d6a90b4a075c561f53e",
            "placeholder": "​",
            "style": "IPY_MODEL_7780a25cd7484b9fa123f143446e1700",
            "value": "README.md: 100%"
          }
        },
        "68c74abbcff147b9b1aad9a4dcccf5e6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d2c36da599fe43c491a6ae1aed6c5dee",
            "max": 10454,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_a8d63017bd4644febd6ad069a3f55499",
            "value": 10454
          }
        },
        "5d0705fe801c47c6b1559217e9c20dbd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_19aa06a2db564f0dbb88fe35d6a380ab",
            "placeholder": "​",
            "style": "IPY_MODEL_69b7698c9dfe4b62a2169ebd927addf5",
            "value": " 10.5k/10.5k [00:00&lt;00:00, 1.50MB/s]"
          }
        },
        "0d94cf03c2394be8a797744faf449391": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "26889e94b7d94d6a90b4a075c561f53e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7780a25cd7484b9fa123f143446e1700": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d2c36da599fe43c491a6ae1aed6c5dee": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a8d63017bd4644febd6ad069a3f55499": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "19aa06a2db564f0dbb88fe35d6a380ab": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "69b7698c9dfe4b62a2169ebd927addf5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c72acc127a194bfe84bba209dd957856": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_a2f4c2d4ac1a4933a0cc2ebc8f9d9183",
              "IPY_MODEL_bae33bcece0d484bb9286f686536c979",
              "IPY_MODEL_c1336e3d1505477b9c180eec1a75218d"
            ],
            "layout": "IPY_MODEL_57d080d99ce3487ead29fff95347caad"
          }
        },
        "a2f4c2d4ac1a4933a0cc2ebc8f9d9183": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7cc9d251fcc241a688d9e0c594f5de27",
            "placeholder": "​",
            "style": "IPY_MODEL_af1a54d8727c410789412de5c5f60af1",
            "value": "sentence_bert_config.json: 100%"
          }
        },
        "bae33bcece0d484bb9286f686536c979": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_022a0b5960f54d9a865bb9b71443c5d4",
            "max": 53,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_ed08558f241f419f9cdd7ba8ce79f64e",
            "value": 53
          }
        },
        "c1336e3d1505477b9c180eec1a75218d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6e49384dc0474bfdbde692f2c67af614",
            "placeholder": "​",
            "style": "IPY_MODEL_c78cfdee965e453fbd140536bed07e1c",
            "value": " 53.0/53.0 [00:00&lt;00:00, 7.24kB/s]"
          }
        },
        "57d080d99ce3487ead29fff95347caad": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7cc9d251fcc241a688d9e0c594f5de27": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "af1a54d8727c410789412de5c5f60af1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "022a0b5960f54d9a865bb9b71443c5d4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ed08558f241f419f9cdd7ba8ce79f64e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "6e49384dc0474bfdbde692f2c67af614": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c78cfdee965e453fbd140536bed07e1c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "da0d25993e6d407998a6b62e9a1dc0f3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_72f5b87d3f5f48d582be873f2361c6f7",
              "IPY_MODEL_b63b6e6ba8784a048a17b4ca79ec24bd",
              "IPY_MODEL_74f179cec7864a1f8847a59423085301"
            ],
            "layout": "IPY_MODEL_0b1aa3fd61b744d0b2e64a0880873f44"
          }
        },
        "72f5b87d3f5f48d582be873f2361c6f7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_cd25e3d975784ab9ab51735c09cf54e5",
            "placeholder": "​",
            "style": "IPY_MODEL_d744d093a82c4849a2bdce71accb0fce",
            "value": "config.json: 100%"
          }
        },
        "b63b6e6ba8784a048a17b4ca79ec24bd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2fea236e815d462498844872891e08c1",
            "max": 612,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_e937810645bd4b188375833922858e11",
            "value": 612
          }
        },
        "74f179cec7864a1f8847a59423085301": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_131325f667fd4154ab7d105b6aa66af0",
            "placeholder": "​",
            "style": "IPY_MODEL_6e6c8c05332f4d01bd2964859dfd4871",
            "value": " 612/612 [00:00&lt;00:00, 86.9kB/s]"
          }
        },
        "0b1aa3fd61b744d0b2e64a0880873f44": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cd25e3d975784ab9ab51735c09cf54e5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d744d093a82c4849a2bdce71accb0fce": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "2fea236e815d462498844872891e08c1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e937810645bd4b188375833922858e11": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "131325f667fd4154ab7d105b6aa66af0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6e6c8c05332f4d01bd2964859dfd4871": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5a29be9d139c4054ac3fa53161e52b2a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_c9e397da4e0a4e738d240be4380a76c7",
              "IPY_MODEL_0f0ef937aa6a4dbdaf40f515c02116f4",
              "IPY_MODEL_ef2f5d492d70434e81da67289bfeb177"
            ],
            "layout": "IPY_MODEL_5e5b0fd7d31a41d0986e937106861011"
          }
        },
        "c9e397da4e0a4e738d240be4380a76c7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8c9d0c1eacaf4f7b8fafed99569f30be",
            "placeholder": "​",
            "style": "IPY_MODEL_905409f9473b412c831ddafe70dc114f",
            "value": "model.safetensors: 100%"
          }
        },
        "0f0ef937aa6a4dbdaf40f515c02116f4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9c14f908bf9c40b5a63fb9554bce6a9b",
            "max": 90868376,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_1fab3518154f422fab4564c70423cddd",
            "value": 90868376
          }
        },
        "ef2f5d492d70434e81da67289bfeb177": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7b779d6b2e9649718bb15f2c4981f1f1",
            "placeholder": "​",
            "style": "IPY_MODEL_5d4fdffcf8fe489f99fa9f4d79d0a511",
            "value": " 90.9M/90.9M [00:00&lt;00:00, 233MB/s]"
          }
        },
        "5e5b0fd7d31a41d0986e937106861011": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8c9d0c1eacaf4f7b8fafed99569f30be": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "905409f9473b412c831ddafe70dc114f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "9c14f908bf9c40b5a63fb9554bce6a9b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1fab3518154f422fab4564c70423cddd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "7b779d6b2e9649718bb15f2c4981f1f1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5d4fdffcf8fe489f99fa9f4d79d0a511": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "cf23a1ddf9dd4ad29b963a0e50004b03": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_4b03e027849f4448a80c6681ba44fc2e",
              "IPY_MODEL_44e5db6d25114227b59cf40c1c784f28",
              "IPY_MODEL_5d929e06fd7844698cd437c25f1bd9a4"
            ],
            "layout": "IPY_MODEL_89229a7de3814950a2ea5657eb970d3c"
          }
        },
        "4b03e027849f4448a80c6681ba44fc2e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d4d6d33a4d3f4838abf14a490e09945e",
            "placeholder": "​",
            "style": "IPY_MODEL_ff28d732179b4fae8a0e4a295d8a22ee",
            "value": "tokenizer_config.json: 100%"
          }
        },
        "44e5db6d25114227b59cf40c1c784f28": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_40d010c5439b48f6b9241af6d0ea1975",
            "max": 350,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_6823e1ca4d724d2ba4d5879b226ba268",
            "value": 350
          }
        },
        "5d929e06fd7844698cd437c25f1bd9a4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_22f287e8ffc44732869b3ad2aac20d9a",
            "placeholder": "​",
            "style": "IPY_MODEL_8edf989e33b3465c9ad9d12496171d5b",
            "value": " 350/350 [00:00&lt;00:00, 53.6kB/s]"
          }
        },
        "89229a7de3814950a2ea5657eb970d3c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d4d6d33a4d3f4838abf14a490e09945e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ff28d732179b4fae8a0e4a295d8a22ee": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "40d010c5439b48f6b9241af6d0ea1975": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6823e1ca4d724d2ba4d5879b226ba268": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "22f287e8ffc44732869b3ad2aac20d9a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8edf989e33b3465c9ad9d12496171d5b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "a2fee88616eb40cdb1e38ad2a6ecfe05": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_b0191618b64448efa5a2996c78f202ec",
              "IPY_MODEL_9c6b42880fff4dc59815d1a79e7b8590",
              "IPY_MODEL_f029d77255bc4150890c310a09e9850f"
            ],
            "layout": "IPY_MODEL_06b95dc2a3bf4c958bb6cf217785ad28"
          }
        },
        "b0191618b64448efa5a2996c78f202ec": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c53de31fc5284319b7b268c052c9998f",
            "placeholder": "​",
            "style": "IPY_MODEL_a2e45613215840b39a92573c401ffd58",
            "value": "vocab.txt: 100%"
          }
        },
        "9c6b42880fff4dc59815d1a79e7b8590": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_4178636e97b246b68c3adda1a2a023e8",
            "max": 231508,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_67656ea4ed8d4c53b699f75941fca5ab",
            "value": 231508
          }
        },
        "f029d77255bc4150890c310a09e9850f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f78607ba6c8f4ce386cba84894eff748",
            "placeholder": "​",
            "style": "IPY_MODEL_c8878202e93343a1b262a73534d71b52",
            "value": " 232k/232k [00:00&lt;00:00, 4.37MB/s]"
          }
        },
        "06b95dc2a3bf4c958bb6cf217785ad28": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c53de31fc5284319b7b268c052c9998f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a2e45613215840b39a92573c401ffd58": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "4178636e97b246b68c3adda1a2a023e8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "67656ea4ed8d4c53b699f75941fca5ab": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "f78607ba6c8f4ce386cba84894eff748": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c8878202e93343a1b262a73534d71b52": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "0e608bbcaa164fbc93480484d5cf540a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_3754621e07dc4641b867d1e061686b32",
              "IPY_MODEL_316fc1b7d5ee4659a3ef37eeaa01fbed",
              "IPY_MODEL_0ecceb6b71654e088481764c2fa4c324"
            ],
            "layout": "IPY_MODEL_7d224fad0706454cb04c24bfac5e7309"
          }
        },
        "3754621e07dc4641b867d1e061686b32": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_483e0ea5fe0949dd901bb7901e5f07c9",
            "placeholder": "​",
            "style": "IPY_MODEL_081bc79dd6cb44dab81e4493fb99c97b",
            "value": "tokenizer.json: 100%"
          }
        },
        "316fc1b7d5ee4659a3ef37eeaa01fbed": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_fe09ed5972e547ddabdc7e59c4d73d62",
            "max": 466247,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_ae81d2a3011a4f15aee30276c59bf936",
            "value": 466247
          }
        },
        "0ecceb6b71654e088481764c2fa4c324": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8223b4e8f20f4088bf88a3dfa1e45d8f",
            "placeholder": "​",
            "style": "IPY_MODEL_252923ca40db4e2ea77f083fb9350145",
            "value": " 466k/466k [00:00&lt;00:00, 17.0MB/s]"
          }
        },
        "7d224fad0706454cb04c24bfac5e7309": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "483e0ea5fe0949dd901bb7901e5f07c9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "081bc79dd6cb44dab81e4493fb99c97b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "fe09ed5972e547ddabdc7e59c4d73d62": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ae81d2a3011a4f15aee30276c59bf936": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "8223b4e8f20f4088bf88a3dfa1e45d8f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "252923ca40db4e2ea77f083fb9350145": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5b2add03e5eb48a6b10d89826b1f3430": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_abe24c5d787247ceadca04bdc6d21f82",
              "IPY_MODEL_2e2a55bb22bc4abdb5ca5c6480ce8479",
              "IPY_MODEL_fa816360cf7c44e2a0562e965585490e"
            ],
            "layout": "IPY_MODEL_2566cbf46d3345559cc286a7d7788efa"
          }
        },
        "abe24c5d787247ceadca04bdc6d21f82": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_33126d7db6a146cab583af942e71eb1f",
            "placeholder": "​",
            "style": "IPY_MODEL_cdeeff9ba4804236a76cb89fcd7b8ea3",
            "value": "special_tokens_map.json: 100%"
          }
        },
        "2e2a55bb22bc4abdb5ca5c6480ce8479": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_06c69f0a44e7407b81d79fa2c61b863c",
            "max": 112,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_67e0ffe7035b41e4a1ae6aa7efeeb44e",
            "value": 112
          }
        },
        "fa816360cf7c44e2a0562e965585490e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_31826b970af44240816ec1d89eec484e",
            "placeholder": "​",
            "style": "IPY_MODEL_0c14351f60244873ac9573006f05aaf7",
            "value": " 112/112 [00:00&lt;00:00, 16.8kB/s]"
          }
        },
        "2566cbf46d3345559cc286a7d7788efa": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "33126d7db6a146cab583af942e71eb1f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cdeeff9ba4804236a76cb89fcd7b8ea3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "06c69f0a44e7407b81d79fa2c61b863c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "67e0ffe7035b41e4a1ae6aa7efeeb44e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "31826b970af44240816ec1d89eec484e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0c14351f60244873ac9573006f05aaf7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5a3709f049a84876a2845cacfbb6103c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_a6ba17303a0b44cb9e384b4dfc968bb0",
              "IPY_MODEL_000b6fe605bc4e3fa983135bb4afdbd5",
              "IPY_MODEL_1faad0cf787e41c5a8b05fa18974f414"
            ],
            "layout": "IPY_MODEL_85544c09ed3e4a35827886c96404fc26"
          }
        },
        "a6ba17303a0b44cb9e384b4dfc968bb0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_fa7afd3b6e0a42339c5832029430c007",
            "placeholder": "​",
            "style": "IPY_MODEL_079f4ea0abf74037b813c1df5d8e3c90",
            "value": "config.json: 100%"
          }
        },
        "000b6fe605bc4e3fa983135bb4afdbd5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_13b1a3544c8c469ebabed3d3e6b9db92",
            "max": 190,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_0d5a5ee963634dba8b2dff8a0d35f5cc",
            "value": 190
          }
        },
        "1faad0cf787e41c5a8b05fa18974f414": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_15eb95a937354388a6138f1dadaef3ec",
            "placeholder": "​",
            "style": "IPY_MODEL_497257ac052f44fbb7925f293014d370",
            "value": " 190/190 [00:00&lt;00:00, 29.5kB/s]"
          }
        },
        "85544c09ed3e4a35827886c96404fc26": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fa7afd3b6e0a42339c5832029430c007": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "079f4ea0abf74037b813c1df5d8e3c90": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "13b1a3544c8c469ebabed3d3e6b9db92": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0d5a5ee963634dba8b2dff8a0d35f5cc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "15eb95a937354388a6138f1dadaef3ec": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "497257ac052f44fbb7925f293014d370": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8b4f22e380b74c70b58452b114d19af4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_304e93ec82e84baea2865cbe20e7ea41",
              "IPY_MODEL_a79ff83455dc4e24babd338efc3bbd9b",
              "IPY_MODEL_ca53646bf1894dd8a215f8f3ec67ee24"
            ],
            "layout": "IPY_MODEL_e82078311f804fe0a3791f929c403068"
          }
        },
        "304e93ec82e84baea2865cbe20e7ea41": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_906db674faa146d58692093a8fe35155",
            "placeholder": "​",
            "style": "IPY_MODEL_b4864452ac684faaac834b1900120f2c",
            "value": "Batches: 100%"
          }
        },
        "a79ff83455dc4e24babd338efc3bbd9b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_feede89d84a1432eb6027caa40d1c7b1",
            "max": 478,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_e06d5d98a6a74fe1889fb1f8c7e5193c",
            "value": 478
          }
        },
        "ca53646bf1894dd8a215f8f3ec67ee24": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_88c170ea301647a59fb43efdbea080fd",
            "placeholder": "​",
            "style": "IPY_MODEL_f806bdc45c7149a198db9cb27f9cb1e8",
            "value": " 478/478 [09:24&lt;00:00,  1.72it/s]"
          }
        },
        "e82078311f804fe0a3791f929c403068": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "906db674faa146d58692093a8fe35155": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b4864452ac684faaac834b1900120f2c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "feede89d84a1432eb6027caa40d1c7b1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e06d5d98a6a74fe1889fb1f8c7e5193c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "88c170ea301647a59fb43efdbea080fd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f806bdc45c7149a198db9cb27f9cb1e8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}